(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_php"

let parse_source_string ?src_file contents =
  let ts_parser = create_parser () in
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  let ts_parser = create_parser () in
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "comment";
  "text_interpolation";
]

let children_regexps : (string * Run.exp option) list = [
  "pat_else", None;
  "pat_public", None;
  "pat_echo", None;
  "pat_endd", None;
  "pat_final", None;
  "string", None;
  "tok_prec_n1_pat_524a507", None;
  "eof", None;
  "var_modifier", None;
  "pat_requ_once", None;
  "pat_use", None;
  "pat_ends", None;
  "pat_prot", None;
  "pat_if", None;
  "cast_type",
  Some (
    Alt [|
      Token (Literal "array");
      Token (Literal "binary");
      Token (Literal "bool");
      Token (Literal "boolean");
      Token (Literal "double");
      Token (Literal "int");
      Token (Literal "integer");
      Token (Literal "float");
      Token (Literal "object");
      Token (Literal "real");
      Token (Literal "string");
      Token (Literal "unset");
    |];
  );
  "pat_cont", None;
  "pat_endfor", None;
  "pat_priv", None;
  "pat_requ", None;
  "pat_name", None;
  "pat_imples", None;
  "automatic_semicolon", None;
  "float", None;
  "name", None;
  "pat_48a4c46", None;
  "pat_match", None;
  "pat_endw", None;
  "pat_goto", None;
  "pat_switch", None;
  "comment", None;
  "empty_statement", None;
  "pat_fn", None;
  "pat_elseif", None;
  "heredoc", None;
  "pat_while", None;
  "pat_brk", None;
  "pat_global", None;
  "pat_endif", None;
  "pat_f398476", None;
  "pat_extends", None;
  "pat_as", None;
  "pat_fina", None;
  "pat_trait", None;
  "pat_enum", None;
  "pat_static", None;
  "null", None;
  "pat_inst_", None;
  "pat_inte", None;
  "pat_e0610ac", None;
  "pat_incl", None;
  "pat_endf", None;
  "pat_fore", None;
  "pat_do", None;
  "pat_inst", None;
  "pat_const", None;
  "boolean", None;
  "php_tag", None;
  "pat_incl_once", None;
  "shell_command_expression", None;
  "pat_abst", None;
  "pat_for", None;
  "pat_case", None;
  "primitive_type",
  Some (
    Alt [|
      Token (Literal "array");
      Token (Literal "callable");
      Token (Literal "iterable");
      Token (Literal "bool");
      Token (Literal "float");
      Token (Literal "int");
      Token (Literal "string");
      Token (Literal "void");
      Token (Literal "mixed");
      Token (Literal "static");
      Token (Literal "false");
      Token (Literal "null");
    |];
  );
  "pat_catch", None;
  "pat_defa", None;
  "pat_b91d208", None;
  "pat_func", None;
  "pat_ret", None;
  "pat_try", None;
  "pat_class", None;
  "pat_throw", None;
  "integer", None;
  "final_modifier", Some (Token (Name "pat_final"););
  "visibility_modifier",
  Some (
    Alt [|
      Token (Name "pat_public");
      Token (Name "pat_prot");
      Token (Name "pat_priv");
    |];
  );
  "named_label_statement",
  Some (
    Seq [
      Token (Name "name");
      Token (Literal ":");
    ];
  );
  "variable_name",
  Some (
    Seq [
      Token (Literal "$");
      Token (Name "name");
    ];
  );
  "namespace_name",
  Some (
    Seq [
      Token (Name "name");
      Repeat (
        Seq [
          Token (Literal "\\");
          Token (Name "name");
        ];
      );
    ];
  );
  "goto_statement",
  Some (
    Seq [
      Token (Name "pat_goto");
      Token (Name "name");
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "string_",
  Some (
    Alt [|
      Token (Name "string");
      Token (Name "heredoc");
    |];
  );
  "namespace_aliasing_clause",
  Some (
    Seq [
      Token (Name "pat_as");
      Token (Name "name");
    ];
  );
  "static_modifier", Some (Token (Name "pat_static"););
  "reserved_identifier",
  Some (
    Alt [|
      Token (Literal "self");
      Token (Literal "parent");
      Token (Name "pat_static");
    |];
  );
  "relative_scope",
  Some (
    Alt [|
      Token (Literal "self");
      Token (Literal "parent");
      Token (Name "pat_static");
    |];
  );
  "abstract_modifier", Some (Token (Name "pat_abst"););
  "text",
  Some (
    Repeat1 (
      Alt [|
        Token (Name "tok_prec_n1_pat_524a507");
        Token (Name "pat_b91d208");
      |];
    );
  );
  "anonymous_function_use_clause",
  Some (
    Seq [
      Token (Name "pat_use");
      Token (Literal "(");
      Opt (
        Token (Literal "&");
      );
      Token (Name "variable_name");
      Repeat (
        Seq [
          Token (Literal ",");
          Opt (
            Token (Literal "&");
          );
          Token (Name "variable_name");
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ")");
    ];
  );
  "namespace_name_as_prefix",
  Some (
    Alt [|
      Token (Literal "\\");
      Seq [
        Opt (
          Token (Literal "\\");
        );
        Token (Name "namespace_name");
        Token (Literal "\\");
      ];
      Seq [
        Token (Name "pat_name");
        Token (Literal "\\");
      ];
      Seq [
        Token (Name "pat_name");
        Opt (
          Token (Literal "\\");
        );
        Token (Name "namespace_name");
        Token (Literal "\\");
      ];
    |];
  );
  "declare_directive",
  Some (
    Seq [
      Alt [|
        Token (Literal "ticks");
        Token (Literal "encoding");
        Token (Literal "strict_types");
      |];
      Token (Literal "=");
      Alt [|
        Token (Name "integer");
        Token (Name "float");
        Token (Name "string_");
        Token (Name "boolean");
        Token (Name "null");
      |];
    ];
  );
  "namespace_use_group_clause",
  Some (
    Seq [
      Opt (
        Alt [|
          Token (Name "pat_func");
          Token (Name "pat_const");
        |];
      );
      Token (Name "namespace_name");
      Opt (
        Token (Name "namespace_aliasing_clause");
      );
    ];
  );
  "modifier",
  Some (
    Alt [|
      Token (Name "var_modifier");
      Token (Name "visibility_modifier");
      Token (Name "static_modifier");
      Token (Name "final_modifier");
      Token (Name "abstract_modifier");
    |];
  );
  "text_interpolation",
  Some (
    Seq [
      Token (Literal "?>");
      Opt (
        Token (Name "text");
      );
      Alt [|
        Token (Name "php_tag");
        Token (Name "eof");
      |];
    ];
  );
  "qualified_name",
  Some (
    Seq [
      Token (Name "namespace_name_as_prefix");
      Token (Name "name");
    ];
  );
  "namespace_use_group",
  Some (
    Seq [
      Token (Literal "{");
      Token (Name "namespace_use_group_clause");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "namespace_use_group_clause");
        ];
      );
      Token (Literal "}");
    ];
  );
  "base_clause",
  Some (
    Seq [
      Token (Name "pat_extends");
      Alt [|
        Token (Name "name");
        Token (Name "reserved_identifier");
        Token (Name "qualified_name");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "name");
            Token (Name "reserved_identifier");
            Token (Name "qualified_name");
          |];
        ];
      );
    ];
  );
  "namespace_use_clause",
  Some (
    Seq [
      Alt [|
        Token (Name "name");
        Token (Name "reserved_identifier");
        Token (Name "qualified_name");
      |];
      Opt (
        Token (Name "namespace_aliasing_clause");
      );
    ];
  );
  "named_type",
  Some (
    Alt [|
      Token (Name "name");
      Token (Name "qualified_name");
    |];
  );
  "class_interface_clause",
  Some (
    Seq [
      Token (Name "pat_imples");
      Alt [|
        Token (Name "name");
        Token (Name "reserved_identifier");
        Token (Name "qualified_name");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "name");
            Token (Name "reserved_identifier");
            Token (Name "qualified_name");
          |];
        ];
      );
    ];
  );
  "namespace_use_declaration",
  Some (
    Seq [
      Token (Name "pat_use");
      Opt (
        Alt [|
          Token (Name "pat_func");
          Token (Name "pat_const");
        |];
      );
      Alt [|
        Seq [
          Token (Name "namespace_use_clause");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "namespace_use_clause");
            ];
          );
        ];
        Seq [
          Opt (
            Token (Literal "\\");
          );
          Token (Name "namespace_name");
          Token (Literal "\\");
          Token (Name "namespace_use_group");
        ];
      |];
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "type_list",
  Some (
    Seq [
      Token (Name "named_type");
      Repeat (
        Seq [
          Token (Literal "|");
          Token (Name "named_type");
        ];
      );
    ];
  );
  "optional_type",
  Some (
    Seq [
      Token (Literal "?");
      Alt [|
        Token (Name "named_type");
        Token (Name "primitive_type");
      |];
    ];
  );
  "types",
  Some (
    Alt [|
      Token (Name "optional_type");
      Token (Name "named_type");
      Token (Name "primitive_type");
    |];
  );
  "union_type",
  Some (
    Seq [
      Token (Name "types");
      Repeat (
        Seq [
          Token (Literal "|");
          Token (Name "types");
        ];
      );
    ];
  );
  "type", Some (Token (Name "union_type"););
  "return_type",
  Some (
    Seq [
      Token (Literal ":");
      Token (Name "type");
    ];
  );
  "anonymous_function_creation_expression",
  Some (
    Seq [
      Opt (
        Token (Name "pat_static");
      );
      Token (Name "pat_func");
      Opt (
        Token (Literal "&");
      );
      Token (Name "formal_parameters");
      Opt (
        Token (Name "anonymous_function_use_clause");
      );
      Opt (
        Token (Name "return_type");
      );
      Token (Name "compound_statement");
    ];
  );
  "argument",
  Some (
    Seq [
      Opt (
        Seq [
          Token (Name "name");
          Token (Literal ":");
        ];
      );
      Alt [|
        Token (Name "variadic_unpacking");
        Token (Name "expression");
      |];
    ];
  );
  "arguments",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "argument");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "argument");
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ")");
    ];
  );
  "array_creation_expression",
  Some (
    Alt [|
      Seq [
        Token (Literal "array");
        Token (Literal "(");
        Opt (
          Seq [
            Token (Name "array_element_initializer");
            Repeat (
              Seq [
                Token (Literal ",");
                Token (Name "array_element_initializer");
              ];
            );
          ];
        );
        Opt (
          Token (Literal ",");
        );
        Token (Literal ")");
      ];
      Seq [
        Token (Literal "[");
        Opt (
          Seq [
            Token (Name "array_element_initializer");
            Repeat (
              Seq [
                Token (Literal ",");
                Token (Name "array_element_initializer");
              ];
            );
          ];
        );
        Opt (
          Token (Literal ",");
        );
        Token (Literal "]");
      ];
    |];
  );
  "array_destructing",
  Some (
    Seq [
      Token (Literal "[");
      Opt (
        Alt [|
          Alt [|
            Token (Name "array_destructing");
            Alt [|
              Token (Name "cast_variable");
              Alt [|
                Alt [|
                  Token (Name "dynamic_variable_name");
                  Token (Name "variable_name");
                |];
                Token (Name "subscript_expression");
                Token (Name "member_call_expression");
                Token (Name "nullsafe_member_call_expression");
                Token (Name "scoped_call_expression");
                Token (Name "function_call_expression");
              |];
              Token (Name "scoped_property_access_expression");
              Token (Name "member_access_expression");
              Token (Name "nullsafe_member_access_expression");
            |];
          |];
          Seq [
            Token (Name "expression");
            Token (Literal "=>");
            Alt [|
              Token (Name "array_destructing");
              Alt [|
                Token (Name "cast_variable");
                Alt [|
                  Alt [|
                    Token (Name "dynamic_variable_name");
                    Token (Name "variable_name");
                  |];
                  Token (Name "subscript_expression");
                  Token (Name "member_call_expression");
                  Token (Name "nullsafe_member_call_expression");
                  Token (Name "scoped_call_expression");
                  Token (Name "function_call_expression");
                |];
                Token (Name "scoped_property_access_expression");
                Token (Name "member_access_expression");
                Token (Name "nullsafe_member_access_expression");
              |];
            |];
          ];
        |];
      );
      Repeat (
        Seq [
          Token (Literal ",");
          Opt (
            Alt [|
              Alt [|
                Token (Name "array_destructing");
                Alt [|
                  Token (Name "cast_variable");
                  Alt [|
                    Alt [|
                      Token (Name "dynamic_variable_name");
                      Token (Name "variable_name");
                    |];
                    Token (Name "subscript_expression");
                    Token (Name "member_call_expression");
                    Token (Name "nullsafe_member_call_expression");
                    Token (Name "scoped_call_expression");
                    Token (Name "function_call_expression");
                  |];
                  Token (Name "scoped_property_access_expression");
                  Token (Name "member_access_expression");
                  Token (Name "nullsafe_member_access_expression");
                |];
              |];
              Seq [
                Token (Name "expression");
                Token (Literal "=>");
                Alt [|
                  Token (Name "array_destructing");
                  Alt [|
                    Token (Name "cast_variable");
                    Alt [|
                      Alt [|
                        Token (Name "dynamic_variable_name");
                        Token (Name "variable_name");
                      |];
                      Token (Name "subscript_expression");
                      Token (Name "member_call_expression");
                      Token (Name "nullsafe_member_call_expression");
                      Token (Name "scoped_call_expression");
                      Token (Name "function_call_expression");
                    |];
                    Token (Name "scoped_property_access_expression");
                    Token (Name "member_access_expression");
                    Token (Name "nullsafe_member_access_expression");
                  |];
                |];
              ];
            |];
          );
        ];
      );
      Token (Literal "]");
    ];
  );
  "array_element_initializer",
  Some (
    Alt [|
      Seq [
        Opt (
          Token (Literal "&");
        );
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "=>");
        Opt (
          Token (Literal "&");
        );
        Token (Name "expression");
      ];
      Token (Name "variadic_unpacking");
    |];
  );
  "arrow_function",
  Some (
    Seq [
      Opt (
        Token (Name "static_modifier");
      );
      Token (Name "pat_fn");
      Opt (
        Token (Literal "&");
      );
      Token (Name "formal_parameters");
      Opt (
        Token (Name "return_type");
      );
      Token (Literal "=>");
      Token (Name "expression");
    ];
  );
  "assignment_expression",
  Some (
    Seq [
      Alt [|
        Alt [|
          Token (Name "cast_variable");
          Alt [|
            Alt [|
              Token (Name "dynamic_variable_name");
              Token (Name "variable_name");
            |];
            Token (Name "subscript_expression");
            Token (Name "member_call_expression");
            Token (Name "nullsafe_member_call_expression");
            Token (Name "scoped_call_expression");
            Token (Name "function_call_expression");
          |];
          Token (Name "scoped_property_access_expression");
          Token (Name "member_access_expression");
          Token (Name "nullsafe_member_access_expression");
        |];
        Token (Name "list_literal");
      |];
      Token (Literal "=");
      Opt (
        Token (Literal "&");
      );
      Token (Name "expression");
    ];
  );
  "attribute",
  Some (
    Seq [
      Alt [|
        Token (Name "name");
        Token (Name "reserved_identifier");
        Token (Name "qualified_name");
      |];
      Opt (
        Token (Name "arguments");
      );
    ];
  );
  "attribute_list",
  Some (
    Repeat1 (
      Seq [
        Token (Literal "#[");
        Token (Name "attribute");
        Repeat (
          Seq [
            Token (Literal ",");
            Token (Name "attribute");
          ];
        );
        Token (Literal "]");
      ];
    );
  );
  "augmented_assignment_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "cast_variable");
        Alt [|
          Alt [|
            Token (Name "dynamic_variable_name");
            Token (Name "variable_name");
          |];
          Token (Name "subscript_expression");
          Token (Name "member_call_expression");
          Token (Name "nullsafe_member_call_expression");
          Token (Name "scoped_call_expression");
          Token (Name "function_call_expression");
        |];
        Token (Name "scoped_property_access_expression");
        Token (Name "member_access_expression");
        Token (Name "nullsafe_member_access_expression");
      |];
      Alt [|
        Token (Literal "**=");
        Token (Literal "*=");
        Token (Literal "/=");
        Token (Literal "%=");
        Token (Literal "+=");
        Token (Literal "-=");
        Token (Literal ".=");
        Token (Literal "<<=");
        Token (Literal ">>=");
        Token (Literal "&=");
        Token (Literal "^=");
        Token (Literal "|=");
        Token (Literal "??=");
      |];
      Token (Name "expression");
    ];
  );
  "binary_expression",
  Some (
    Alt [|
      Seq [
        Token (Name "unary_expression");
        Token (Name "pat_inst_");
        Alt [|
          Token (Name "qualified_name");
          Token (Name "name");
          Token (Name "reserved_identifier");
          Token (Name "subscript_expression");
          Token (Name "member_access_expression");
          Token (Name "nullsafe_member_access_expression");
          Token (Name "scoped_property_access_expression");
          Alt [|
            Token (Name "dynamic_variable_name");
            Token (Name "variable_name");
          |];
        |];
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "??");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Name "pat_e0610ac");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Name "pat_48a4c46");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Name "pat_f398476");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "||");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "&&");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "|");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "^");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "&");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "==");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "!=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<>");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "===");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "!==");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<=>");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<<");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">>");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "+");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "-");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ".");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "*");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "/");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "%");
        Token (Name "expression");
      ];
    |];
  );
  "break_statement",
  Some (
    Seq [
      Token (Name "pat_brk");
      Opt (
        Token (Name "expression");
      );
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "case_statement",
  Some (
    Seq [
      Token (Name "pat_case");
      Token (Name "expression");
      Alt [|
        Token (Literal ":");
        Token (Literal ";");
      |];
      Repeat (
        Alt [|
          Token (Name "empty_statement");
          Token (Name "compound_statement");
          Token (Name "named_label_statement");
          Token (Name "expression_statement");
          Token (Name "if_statement");
          Token (Name "switch_statement");
          Token (Name "while_statement");
          Token (Name "do_statement");
          Token (Name "for_statement");
          Token (Name "foreach_statement");
          Token (Name "goto_statement");
          Token (Name "continue_statement");
          Token (Name "break_statement");
          Token (Name "return_statement");
          Token (Name "try_statement");
          Token (Name "declare_statement");
          Token (Name "echo_statement");
          Token (Name "unset_statement");
          Token (Name "const_declaration");
          Token (Name "function_definition");
          Token (Name "class_declaration");
          Token (Name "interface_declaration");
          Token (Name "trait_declaration");
          Token (Name "enum_declaration");
          Token (Name "namespace_definition");
          Token (Name "namespace_use_declaration");
          Token (Name "global_declaration");
          Token (Name "function_static_declaration");
        |];
      );
    ];
  );
  "cast_expression",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "cast_type");
      Token (Literal ")");
      Token (Name "unary_expression");
    ];
  );
  "cast_variable",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "cast_type");
      Token (Literal ")");
      Alt [|
        Token (Name "cast_variable");
        Alt [|
          Alt [|
            Token (Name "dynamic_variable_name");
            Token (Name "variable_name");
          |];
          Token (Name "subscript_expression");
          Token (Name "member_call_expression");
          Token (Name "nullsafe_member_call_expression");
          Token (Name "scoped_call_expression");
          Token (Name "function_call_expression");
        |];
        Token (Name "scoped_property_access_expression");
        Token (Name "member_access_expression");
        Token (Name "nullsafe_member_access_expression");
      |];
    ];
  );
  "catch_clause",
  Some (
    Seq [
      Token (Name "pat_catch");
      Token (Literal "(");
      Token (Name "type_list");
      Opt (
        Token (Name "variable_name");
      );
      Token (Literal ")");
      Token (Name "compound_statement");
    ];
  );
  "class_const_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "attribute_list");
      );
      Opt (
        Token (Name "final_modifier");
      );
      Token (Name "const_declaration_");
    ];
  );
  "class_constant_access_expression",
  Some (
    Seq [
      Token (Name "scope_resolution_qualifier");
      Token (Literal "::");
      Alt [|
        Token (Name "name");
        Token (Name "reserved_identifier");
      |];
    ];
  );
  "class_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "attribute_list");
      );
      Opt (
        Alt [|
          Token (Name "final_modifier");
          Token (Name "abstract_modifier");
        |];
      );
      Token (Name "pat_class");
      Token (Name "name");
      Opt (
        Token (Name "base_clause");
      );
      Opt (
        Token (Name "class_interface_clause");
      );
      Token (Name "declaration_list");
      Opt (
        Alt [|
          Token (Name "automatic_semicolon");
          Token (Literal ";");
        |];
      );
    ];
  );
  "clone_expression",
  Some (
    Seq [
      Token (Literal "clone");
      Token (Name "primary_expression");
    ];
  );
  "colon_block",
  Some (
    Seq [
      Token (Literal ":");
      Repeat (
        Alt [|
          Token (Name "empty_statement");
          Token (Name "compound_statement");
          Token (Name "named_label_statement");
          Token (Name "expression_statement");
          Token (Name "if_statement");
          Token (Name "switch_statement");
          Token (Name "while_statement");
          Token (Name "do_statement");
          Token (Name "for_statement");
          Token (Name "foreach_statement");
          Token (Name "goto_statement");
          Token (Name "continue_statement");
          Token (Name "break_statement");
          Token (Name "return_statement");
          Token (Name "try_statement");
          Token (Name "declare_statement");
          Token (Name "echo_statement");
          Token (Name "unset_statement");
          Token (Name "const_declaration");
          Token (Name "function_definition");
          Token (Name "class_declaration");
          Token (Name "interface_declaration");
          Token (Name "trait_declaration");
          Token (Name "enum_declaration");
          Token (Name "namespace_definition");
          Token (Name "namespace_use_declaration");
          Token (Name "global_declaration");
          Token (Name "function_static_declaration");
        |];
      );
    ];
  );
  "compound_statement",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "empty_statement");
          Token (Name "compound_statement");
          Token (Name "named_label_statement");
          Token (Name "expression_statement");
          Token (Name "if_statement");
          Token (Name "switch_statement");
          Token (Name "while_statement");
          Token (Name "do_statement");
          Token (Name "for_statement");
          Token (Name "foreach_statement");
          Token (Name "goto_statement");
          Token (Name "continue_statement");
          Token (Name "break_statement");
          Token (Name "return_statement");
          Token (Name "try_statement");
          Token (Name "declare_statement");
          Token (Name "echo_statement");
          Token (Name "unset_statement");
          Token (Name "const_declaration");
          Token (Name "function_definition");
          Token (Name "class_declaration");
          Token (Name "interface_declaration");
          Token (Name "trait_declaration");
          Token (Name "enum_declaration");
          Token (Name "namespace_definition");
          Token (Name "namespace_use_declaration");
          Token (Name "global_declaration");
          Token (Name "function_static_declaration");
        |];
      );
      Token (Literal "}");
    ];
  );
  "conditional_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "?");
      Opt (
        Token (Name "expression");
      );
      Token (Literal ":");
      Token (Name "expression");
    ];
  );
  "const_declaration",
  Some (
    Token (Name "const_declaration_");
  );
  "const_declaration_",
  Some (
    Seq [
      Opt (
        Token (Name "visibility_modifier");
      );
      Token (Name "pat_const");
      Token (Name "const_element");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "const_element");
        ];
      );
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "const_element",
  Some (
    Seq [
      Alt [|
        Token (Name "name");
        Token (Name "reserved_identifier");
      |];
      Token (Literal "=");
      Token (Name "expression");
    ];
  );
  "continue_statement",
  Some (
    Seq [
      Token (Name "pat_cont");
      Opt (
        Token (Name "expression");
      );
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "declaration_list",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Token (Name "member_declaration");
      );
      Token (Literal "}");
    ];
  );
  "declare_statement",
  Some (
    Seq [
      Token (Literal "declare");
      Token (Literal "(");
      Token (Name "declare_directive");
      Token (Literal ")");
      Alt [|
        Alt [|
          Token (Name "empty_statement");
          Token (Name "compound_statement");
          Token (Name "named_label_statement");
          Token (Name "expression_statement");
          Token (Name "if_statement");
          Token (Name "switch_statement");
          Token (Name "while_statement");
          Token (Name "do_statement");
          Token (Name "for_statement");
          Token (Name "foreach_statement");
          Token (Name "goto_statement");
          Token (Name "continue_statement");
          Token (Name "break_statement");
          Token (Name "return_statement");
          Token (Name "try_statement");
          Token (Name "declare_statement");
          Token (Name "echo_statement");
          Token (Name "unset_statement");
          Token (Name "const_declaration");
          Token (Name "function_definition");
          Token (Name "class_declaration");
          Token (Name "interface_declaration");
          Token (Name "trait_declaration");
          Token (Name "enum_declaration");
          Token (Name "namespace_definition");
          Token (Name "namespace_use_declaration");
          Token (Name "global_declaration");
          Token (Name "function_static_declaration");
        |];
        Seq [
          Token (Literal ":");
          Repeat (
            Alt [|
              Token (Name "empty_statement");
              Token (Name "compound_statement");
              Token (Name "named_label_statement");
              Token (Name "expression_statement");
              Token (Name "if_statement");
              Token (Name "switch_statement");
              Token (Name "while_statement");
              Token (Name "do_statement");
              Token (Name "for_statement");
              Token (Name "foreach_statement");
              Token (Name "goto_statement");
              Token (Name "continue_statement");
              Token (Name "break_statement");
              Token (Name "return_statement");
              Token (Name "try_statement");
              Token (Name "declare_statement");
              Token (Name "echo_statement");
              Token (Name "unset_statement");
              Token (Name "const_declaration");
              Token (Name "function_definition");
              Token (Name "class_declaration");
              Token (Name "interface_declaration");
              Token (Name "trait_declaration");
              Token (Name "enum_declaration");
              Token (Name "namespace_definition");
              Token (Name "namespace_use_declaration");
              Token (Name "global_declaration");
              Token (Name "function_static_declaration");
            |];
          );
          Token (Name "pat_endd");
          Alt [|
            Token (Name "automatic_semicolon");
            Token (Literal ";");
          |];
        ];
        Alt [|
          Token (Name "automatic_semicolon");
          Token (Literal ";");
        |];
      |];
    ];
  );
  "default_statement",
  Some (
    Seq [
      Token (Name "pat_defa");
      Alt [|
        Token (Literal ":");
        Token (Literal ";");
      |];
      Repeat (
        Alt [|
          Token (Name "empty_statement");
          Token (Name "compound_statement");
          Token (Name "named_label_statement");
          Token (Name "expression_statement");
          Token (Name "if_statement");
          Token (Name "switch_statement");
          Token (Name "while_statement");
          Token (Name "do_statement");
          Token (Name "for_statement");
          Token (Name "foreach_statement");
          Token (Name "goto_statement");
          Token (Name "continue_statement");
          Token (Name "break_statement");
          Token (Name "return_statement");
          Token (Name "try_statement");
          Token (Name "declare_statement");
          Token (Name "echo_statement");
          Token (Name "unset_statement");
          Token (Name "const_declaration");
          Token (Name "function_definition");
          Token (Name "class_declaration");
          Token (Name "interface_declaration");
          Token (Name "trait_declaration");
          Token (Name "enum_declaration");
          Token (Name "namespace_definition");
          Token (Name "namespace_use_declaration");
          Token (Name "global_declaration");
          Token (Name "function_static_declaration");
        |];
      );
    ];
  );
  "dereferencable_expression",
  Some (
    Alt [|
      Alt [|
        Token (Name "cast_variable");
        Alt [|
          Alt [|
            Token (Name "dynamic_variable_name");
            Token (Name "variable_name");
          |];
          Token (Name "subscript_expression");
          Token (Name "member_call_expression");
          Token (Name "nullsafe_member_call_expression");
          Token (Name "scoped_call_expression");
          Token (Name "function_call_expression");
        |];
        Token (Name "scoped_property_access_expression");
        Token (Name "member_access_expression");
        Token (Name "nullsafe_member_access_expression");
      |];
      Token (Name "class_constant_access_expression");
      Token (Name "parenthesized_expression");
      Token (Name "array_creation_expression");
      Token (Name "name");
      Token (Name "reserved_identifier");
      Token (Name "qualified_name");
      Token (Name "string_");
    |];
  );
  "do_statement",
  Some (
    Seq [
      Token (Name "pat_do");
      Alt [|
        Token (Name "empty_statement");
        Token (Name "compound_statement");
        Token (Name "named_label_statement");
        Token (Name "expression_statement");
        Token (Name "if_statement");
        Token (Name "switch_statement");
        Token (Name "while_statement");
        Token (Name "do_statement");
        Token (Name "for_statement");
        Token (Name "foreach_statement");
        Token (Name "goto_statement");
        Token (Name "continue_statement");
        Token (Name "break_statement");
        Token (Name "return_statement");
        Token (Name "try_statement");
        Token (Name "declare_statement");
        Token (Name "echo_statement");
        Token (Name "unset_statement");
        Token (Name "const_declaration");
        Token (Name "function_definition");
        Token (Name "class_declaration");
        Token (Name "interface_declaration");
        Token (Name "trait_declaration");
        Token (Name "enum_declaration");
        Token (Name "namespace_definition");
        Token (Name "namespace_use_declaration");
        Token (Name "global_declaration");
        Token (Name "function_static_declaration");
      |];
      Token (Name "pat_while");
      Token (Name "parenthesized_expression");
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "dynamic_variable_name",
  Some (
    Alt [|
      Seq [
        Token (Literal "$");
        Alt [|
          Token (Name "dynamic_variable_name");
          Token (Name "variable_name");
        |];
      ];
      Seq [
        Token (Literal "$");
        Token (Literal "{");
        Token (Name "expression");
        Token (Literal "}");
      ];
    |];
  );
  "echo_statement",
  Some (
    Seq [
      Token (Name "pat_echo");
      Token (Name "expressions");
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "else_clause",
  Some (
    Seq [
      Token (Name "pat_else");
      Alt [|
        Token (Name "empty_statement");
        Token (Name "compound_statement");
        Token (Name "named_label_statement");
        Token (Name "expression_statement");
        Token (Name "if_statement");
        Token (Name "switch_statement");
        Token (Name "while_statement");
        Token (Name "do_statement");
        Token (Name "for_statement");
        Token (Name "foreach_statement");
        Token (Name "goto_statement");
        Token (Name "continue_statement");
        Token (Name "break_statement");
        Token (Name "return_statement");
        Token (Name "try_statement");
        Token (Name "declare_statement");
        Token (Name "echo_statement");
        Token (Name "unset_statement");
        Token (Name "const_declaration");
        Token (Name "function_definition");
        Token (Name "class_declaration");
        Token (Name "interface_declaration");
        Token (Name "trait_declaration");
        Token (Name "enum_declaration");
        Token (Name "namespace_definition");
        Token (Name "namespace_use_declaration");
        Token (Name "global_declaration");
        Token (Name "function_static_declaration");
      |];
    ];
  );
  "else_clause_2",
  Some (
    Seq [
      Token (Name "pat_else");
      Token (Name "colon_block");
    ];
  );
  "else_if_clause",
  Some (
    Seq [
      Token (Name "pat_elseif");
      Token (Name "parenthesized_expression");
      Alt [|
        Token (Name "empty_statement");
        Token (Name "compound_statement");
        Token (Name "named_label_statement");
        Token (Name "expression_statement");
        Token (Name "if_statement");
        Token (Name "switch_statement");
        Token (Name "while_statement");
        Token (Name "do_statement");
        Token (Name "for_statement");
        Token (Name "foreach_statement");
        Token (Name "goto_statement");
        Token (Name "continue_statement");
        Token (Name "break_statement");
        Token (Name "return_statement");
        Token (Name "try_statement");
        Token (Name "declare_statement");
        Token (Name "echo_statement");
        Token (Name "unset_statement");
        Token (Name "const_declaration");
        Token (Name "function_definition");
        Token (Name "class_declaration");
        Token (Name "interface_declaration");
        Token (Name "trait_declaration");
        Token (Name "enum_declaration");
        Token (Name "namespace_definition");
        Token (Name "namespace_use_declaration");
        Token (Name "global_declaration");
        Token (Name "function_static_declaration");
      |];
    ];
  );
  "else_if_clause_2",
  Some (
    Seq [
      Token (Name "pat_elseif");
      Token (Name "parenthesized_expression");
      Token (Name "colon_block");
    ];
  );
  "enum_case",
  Some (
    Seq [
      Opt (
        Token (Name "attribute_list");
      );
      Token (Literal "case");
      Token (Name "name");
      Opt (
        Seq [
          Token (Literal "=");
          Alt [|
            Token (Name "string");
            Token (Name "integer");
          |];
        ];
      );
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "enum_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "attribute_list");
      );
      Token (Name "pat_enum");
      Token (Name "name");
      Opt (
        Seq [
          Token (Literal ":");
          Token (Name "type");
        ];
      );
      Opt (
        Token (Name "class_interface_clause");
      );
      Token (Name "enum_declaration_list");
    ];
  );
  "enum_declaration_list",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Token (Name "enum_member_declaration");
      );
      Token (Literal "}");
    ];
  );
  "enum_member_declaration",
  Some (
    Alt [|
      Token (Name "enum_case");
      Token (Name "method_declaration");
      Token (Name "use_declaration");
    |];
  );
  "exponentiation_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "clone_expression");
        Token (Name "primary_expression");
      |];
      Token (Literal "**");
      Alt [|
        Token (Name "exponentiation_expression");
        Token (Name "clone_expression");
        Token (Name "primary_expression");
      |];
    ];
  );
  "expression",
  Some (
    Alt [|
      Token (Name "conditional_expression");
      Token (Name "match_expression");
      Token (Name "augmented_assignment_expression");
      Token (Name "assignment_expression");
      Token (Name "yield_expression");
      Token (Name "unary_expression");
      Token (Name "binary_expression");
      Token (Name "include_expression");
      Token (Name "include_once_expression");
      Token (Name "require_expression");
      Token (Name "require_once_expression");
    |];
  );
  "expression_statement",
  Some (
    Seq [
      Token (Name "expression");
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "expressions",
  Some (
    Alt [|
      Token (Name "expression");
      Token (Name "sequence_expression");
    |];
  );
  "finally_clause",
  Some (
    Seq [
      Token (Name "pat_fina");
      Token (Name "compound_statement");
    ];
  );
  "for_statement",
  Some (
    Seq [
      Token (Name "pat_for");
      Token (Literal "(");
      Opt (
        Token (Name "expressions");
      );
      Token (Literal ";");
      Opt (
        Token (Name "expressions");
      );
      Token (Literal ";");
      Opt (
        Token (Name "expressions");
      );
      Token (Literal ")");
      Alt [|
        Alt [|
          Token (Name "automatic_semicolon");
          Token (Literal ";");
        |];
        Alt [|
          Token (Name "empty_statement");
          Token (Name "compound_statement");
          Token (Name "named_label_statement");
          Token (Name "expression_statement");
          Token (Name "if_statement");
          Token (Name "switch_statement");
          Token (Name "while_statement");
          Token (Name "do_statement");
          Token (Name "for_statement");
          Token (Name "foreach_statement");
          Token (Name "goto_statement");
          Token (Name "continue_statement");
          Token (Name "break_statement");
          Token (Name "return_statement");
          Token (Name "try_statement");
          Token (Name "declare_statement");
          Token (Name "echo_statement");
          Token (Name "unset_statement");
          Token (Name "const_declaration");
          Token (Name "function_definition");
          Token (Name "class_declaration");
          Token (Name "interface_declaration");
          Token (Name "trait_declaration");
          Token (Name "enum_declaration");
          Token (Name "namespace_definition");
          Token (Name "namespace_use_declaration");
          Token (Name "global_declaration");
          Token (Name "function_static_declaration");
        |];
        Seq [
          Token (Literal ":");
          Repeat (
            Alt [|
              Token (Name "empty_statement");
              Token (Name "compound_statement");
              Token (Name "named_label_statement");
              Token (Name "expression_statement");
              Token (Name "if_statement");
              Token (Name "switch_statement");
              Token (Name "while_statement");
              Token (Name "do_statement");
              Token (Name "for_statement");
              Token (Name "foreach_statement");
              Token (Name "goto_statement");
              Token (Name "continue_statement");
              Token (Name "break_statement");
              Token (Name "return_statement");
              Token (Name "try_statement");
              Token (Name "declare_statement");
              Token (Name "echo_statement");
              Token (Name "unset_statement");
              Token (Name "const_declaration");
              Token (Name "function_definition");
              Token (Name "class_declaration");
              Token (Name "interface_declaration");
              Token (Name "trait_declaration");
              Token (Name "enum_declaration");
              Token (Name "namespace_definition");
              Token (Name "namespace_use_declaration");
              Token (Name "global_declaration");
              Token (Name "function_static_declaration");
            |];
          );
          Token (Name "pat_endfor");
          Alt [|
            Token (Name "automatic_semicolon");
            Token (Literal ";");
          |];
        ];
      |];
    ];
  );
  "foreach_pair",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "=>");
      Alt [|
        Seq [
          Opt (
            Token (Literal "&");
          );
          Token (Name "expression");
        ];
        Token (Name "list_literal");
      |];
    ];
  );
  "foreach_statement",
  Some (
    Seq [
      Token (Name "pat_fore");
      Token (Literal "(");
      Token (Name "expression");
      Token (Name "pat_as");
      Alt [|
        Token (Name "foreach_pair");
        Alt [|
          Seq [
            Opt (
              Token (Literal "&");
            );
            Token (Name "expression");
          ];
          Token (Name "list_literal");
        |];
      |];
      Token (Literal ")");
      Alt [|
        Alt [|
          Token (Name "automatic_semicolon");
          Token (Literal ";");
        |];
        Alt [|
          Token (Name "empty_statement");
          Token (Name "compound_statement");
          Token (Name "named_label_statement");
          Token (Name "expression_statement");
          Token (Name "if_statement");
          Token (Name "switch_statement");
          Token (Name "while_statement");
          Token (Name "do_statement");
          Token (Name "for_statement");
          Token (Name "foreach_statement");
          Token (Name "goto_statement");
          Token (Name "continue_statement");
          Token (Name "break_statement");
          Token (Name "return_statement");
          Token (Name "try_statement");
          Token (Name "declare_statement");
          Token (Name "echo_statement");
          Token (Name "unset_statement");
          Token (Name "const_declaration");
          Token (Name "function_definition");
          Token (Name "class_declaration");
          Token (Name "interface_declaration");
          Token (Name "trait_declaration");
          Token (Name "enum_declaration");
          Token (Name "namespace_definition");
          Token (Name "namespace_use_declaration");
          Token (Name "global_declaration");
          Token (Name "function_static_declaration");
        |];
        Seq [
          Token (Name "colon_block");
          Token (Name "pat_endf");
          Alt [|
            Token (Name "automatic_semicolon");
            Token (Literal ";");
          |];
        ];
      |];
    ];
  );
  "formal_parameters",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Alt [|
            Token (Name "simple_parameter");
            Token (Name "variadic_parameter");
            Token (Name "property_promotion_parameter");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "simple_parameter");
                Token (Name "variadic_parameter");
                Token (Name "property_promotion_parameter");
              |];
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ")");
    ];
  );
  "function_call_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "name");
        Token (Name "reserved_identifier");
        Token (Name "qualified_name");
        Alt [|
          Alt [|
            Alt [|
              Token (Name "dynamic_variable_name");
              Token (Name "variable_name");
            |];
            Token (Name "subscript_expression");
            Token (Name "member_call_expression");
            Token (Name "nullsafe_member_call_expression");
            Token (Name "scoped_call_expression");
            Token (Name "function_call_expression");
          |];
          Token (Name "parenthesized_expression");
          Token (Name "array_creation_expression");
          Token (Name "string_");
        |];
      |];
      Token (Name "arguments");
    ];
  );
  "function_definition",
  Some (
    Seq [
      Opt (
        Token (Name "attribute_list");
      );
      Token (Name "function_definition_header");
      Token (Name "compound_statement");
    ];
  );
  "function_definition_header",
  Some (
    Seq [
      Token (Name "pat_func");
      Opt (
        Token (Literal "&");
      );
      Alt [|
        Token (Name "name");
        Token (Name "reserved_identifier");
      |];
      Token (Name "formal_parameters");
      Opt (
        Token (Name "return_type");
      );
    ];
  );
  "function_static_declaration",
  Some (
    Seq [
      Token (Name "pat_static");
      Token (Name "static_variable_declaration");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "static_variable_declaration");
        ];
      );
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "global_declaration",
  Some (
    Seq [
      Token (Name "pat_global");
      Alt [|
        Token (Name "dynamic_variable_name");
        Token (Name "variable_name");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "dynamic_variable_name");
            Token (Name "variable_name");
          |];
        ];
      );
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "if_statement",
  Some (
    Seq [
      Token (Name "pat_if");
      Token (Name "parenthesized_expression");
      Alt [|
        Seq [
          Alt [|
            Token (Name "empty_statement");
            Token (Name "compound_statement");
            Token (Name "named_label_statement");
            Token (Name "expression_statement");
            Token (Name "if_statement");
            Token (Name "switch_statement");
            Token (Name "while_statement");
            Token (Name "do_statement");
            Token (Name "for_statement");
            Token (Name "foreach_statement");
            Token (Name "goto_statement");
            Token (Name "continue_statement");
            Token (Name "break_statement");
            Token (Name "return_statement");
            Token (Name "try_statement");
            Token (Name "declare_statement");
            Token (Name "echo_statement");
            Token (Name "unset_statement");
            Token (Name "const_declaration");
            Token (Name "function_definition");
            Token (Name "class_declaration");
            Token (Name "interface_declaration");
            Token (Name "trait_declaration");
            Token (Name "enum_declaration");
            Token (Name "namespace_definition");
            Token (Name "namespace_use_declaration");
            Token (Name "global_declaration");
            Token (Name "function_static_declaration");
          |];
          Repeat (
            Token (Name "else_if_clause");
          );
          Opt (
            Token (Name "else_clause");
          );
        ];
        Seq [
          Token (Name "colon_block");
          Repeat (
            Token (Name "else_if_clause_2");
          );
          Opt (
            Token (Name "else_clause_2");
          );
          Token (Name "pat_endif");
          Alt [|
            Token (Name "automatic_semicolon");
            Token (Literal ";");
          |];
        ];
      |];
    ];
  );
  "include_expression",
  Some (
    Seq [
      Token (Name "pat_incl");
      Token (Name "expression");
    ];
  );
  "include_once_expression",
  Some (
    Seq [
      Token (Name "pat_incl_once");
      Token (Name "expression");
    ];
  );
  "interface_declaration",
  Some (
    Seq [
      Token (Name "pat_inte");
      Token (Name "name");
      Opt (
        Token (Name "base_clause");
      );
      Token (Name "declaration_list");
    ];
  );
  "list_destructing",
  Some (
    Seq [
      Token (Literal "list");
      Token (Literal "(");
      Opt (
        Alt [|
          Alt [|
            Token (Name "list_destructing");
            Alt [|
              Token (Name "cast_variable");
              Alt [|
                Alt [|
                  Token (Name "dynamic_variable_name");
                  Token (Name "variable_name");
                |];
                Token (Name "subscript_expression");
                Token (Name "member_call_expression");
                Token (Name "nullsafe_member_call_expression");
                Token (Name "scoped_call_expression");
                Token (Name "function_call_expression");
              |];
              Token (Name "scoped_property_access_expression");
              Token (Name "member_access_expression");
              Token (Name "nullsafe_member_access_expression");
            |];
          |];
          Seq [
            Token (Name "expression");
            Token (Literal "=>");
            Alt [|
              Token (Name "list_destructing");
              Alt [|
                Token (Name "cast_variable");
                Alt [|
                  Alt [|
                    Token (Name "dynamic_variable_name");
                    Token (Name "variable_name");
                  |];
                  Token (Name "subscript_expression");
                  Token (Name "member_call_expression");
                  Token (Name "nullsafe_member_call_expression");
                  Token (Name "scoped_call_expression");
                  Token (Name "function_call_expression");
                |];
                Token (Name "scoped_property_access_expression");
                Token (Name "member_access_expression");
                Token (Name "nullsafe_member_access_expression");
              |];
            |];
          ];
        |];
      );
      Repeat (
        Seq [
          Token (Literal ",");
          Opt (
            Alt [|
              Alt [|
                Token (Name "list_destructing");
                Alt [|
                  Token (Name "cast_variable");
                  Alt [|
                    Alt [|
                      Token (Name "dynamic_variable_name");
                      Token (Name "variable_name");
                    |];
                    Token (Name "subscript_expression");
                    Token (Name "member_call_expression");
                    Token (Name "nullsafe_member_call_expression");
                    Token (Name "scoped_call_expression");
                    Token (Name "function_call_expression");
                  |];
                  Token (Name "scoped_property_access_expression");
                  Token (Name "member_access_expression");
                  Token (Name "nullsafe_member_access_expression");
                |];
              |];
              Seq [
                Token (Name "expression");
                Token (Literal "=>");
                Alt [|
                  Token (Name "list_destructing");
                  Alt [|
                    Token (Name "cast_variable");
                    Alt [|
                      Alt [|
                        Token (Name "dynamic_variable_name");
                        Token (Name "variable_name");
                      |];
                      Token (Name "subscript_expression");
                      Token (Name "member_call_expression");
                      Token (Name "nullsafe_member_call_expression");
                      Token (Name "scoped_call_expression");
                      Token (Name "function_call_expression");
                    |];
                    Token (Name "scoped_property_access_expression");
                    Token (Name "member_access_expression");
                    Token (Name "nullsafe_member_access_expression");
                  |];
                |];
              ];
            |];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "list_literal",
  Some (
    Alt [|
      Token (Name "list_destructing");
      Token (Name "array_destructing");
    |];
  );
  "match_block",
  Some (
    Seq [
      Token (Literal "{");
      Alt [|
        Token (Name "match_conditional_expression");
        Token (Name "match_default_expression");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "match_conditional_expression");
            Token (Name "match_default_expression");
          |];
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal "}");
    ];
  );
  "match_condition_list",
  Some (
    Seq [
      Token (Name "expression");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "expression");
        ];
      );
    ];
  );
  "match_conditional_expression",
  Some (
    Seq [
      Token (Name "match_condition_list");
      Token (Literal "=>");
      Token (Name "expression");
    ];
  );
  "match_default_expression",
  Some (
    Seq [
      Token (Name "pat_defa");
      Token (Literal "=>");
      Token (Name "expression");
    ];
  );
  "match_expression",
  Some (
    Seq [
      Token (Name "pat_match");
      Token (Name "parenthesized_expression");
      Token (Name "match_block");
    ];
  );
  "member_access_expression",
  Some (
    Seq [
      Token (Name "dereferencable_expression");
      Token (Literal "->");
      Alt [|
        Alt [|
          Token (Name "reserved_identifier");
          Token (Name "name");
          Alt [|
            Token (Name "dynamic_variable_name");
            Token (Name "variable_name");
          |];
        |];
        Seq [
          Token (Literal "{");
          Token (Name "expression");
          Token (Literal "}");
        ];
      |];
    ];
  );
  "member_call_expression",
  Some (
    Seq [
      Token (Name "dereferencable_expression");
      Token (Literal "->");
      Alt [|
        Alt [|
          Token (Name "reserved_identifier");
          Token (Name "name");
          Alt [|
            Token (Name "dynamic_variable_name");
            Token (Name "variable_name");
          |];
        |];
        Seq [
          Token (Literal "{");
          Token (Name "expression");
          Token (Literal "}");
        ];
      |];
      Token (Name "arguments");
    ];
  );
  "member_declaration",
  Some (
    Alt [|
      Token (Name "class_const_declaration");
      Token (Name "property_declaration");
      Token (Name "method_declaration");
      Token (Name "use_declaration");
    |];
  );
  "method_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "attribute_list");
      );
      Repeat (
        Token (Name "modifier");
      );
      Token (Name "function_definition_header");
      Alt [|
        Token (Name "compound_statement");
        Alt [|
          Token (Name "automatic_semicolon");
          Token (Literal ";");
        |];
      |];
    ];
  );
  "namespace_definition",
  Some (
    Seq [
      Token (Name "pat_name");
      Alt [|
        Seq [
          Token (Name "namespace_name");
          Alt [|
            Token (Name "automatic_semicolon");
            Token (Literal ";");
          |];
        ];
        Seq [
          Opt (
            Token (Name "namespace_name");
          );
          Token (Name "compound_statement");
        ];
      |];
    ];
  );
  "nullsafe_member_access_expression",
  Some (
    Seq [
      Token (Name "dereferencable_expression");
      Token (Literal "?->");
      Alt [|
        Alt [|
          Token (Name "reserved_identifier");
          Token (Name "name");
          Alt [|
            Token (Name "dynamic_variable_name");
            Token (Name "variable_name");
          |];
        |];
        Seq [
          Token (Literal "{");
          Token (Name "expression");
          Token (Literal "}");
        ];
      |];
    ];
  );
  "nullsafe_member_call_expression",
  Some (
    Seq [
      Token (Name "dereferencable_expression");
      Token (Literal "?->");
      Alt [|
        Alt [|
          Token (Name "reserved_identifier");
          Token (Name "name");
          Alt [|
            Token (Name "dynamic_variable_name");
            Token (Name "variable_name");
          |];
        |];
        Seq [
          Token (Literal "{");
          Token (Name "expression");
          Token (Literal "}");
        ];
      |];
      Token (Name "arguments");
    ];
  );
  "object_creation_expression",
  Some (
    Alt [|
      Seq [
        Token (Literal "new");
        Alt [|
          Token (Name "qualified_name");
          Token (Name "name");
          Token (Name "reserved_identifier");
          Token (Name "subscript_expression");
          Token (Name "member_access_expression");
          Token (Name "nullsafe_member_access_expression");
          Token (Name "scoped_property_access_expression");
          Alt [|
            Token (Name "dynamic_variable_name");
            Token (Name "variable_name");
          |];
        |];
        Opt (
          Token (Name "arguments");
        );
      ];
      Seq [
        Token (Literal "new");
        Token (Name "pat_class");
        Opt (
          Token (Name "arguments");
        );
        Opt (
          Token (Name "base_clause");
        );
        Opt (
          Token (Name "class_interface_clause");
        );
        Token (Name "declaration_list");
      ];
    |];
  );
  "parenthesized_expression",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "expression");
      Token (Literal ")");
    ];
  );
  "primary_expression",
  Some (
    Alt [|
      Alt [|
        Token (Name "cast_variable");
        Alt [|
          Alt [|
            Token (Name "dynamic_variable_name");
            Token (Name "variable_name");
          |];
          Token (Name "subscript_expression");
          Token (Name "member_call_expression");
          Token (Name "nullsafe_member_call_expression");
          Token (Name "scoped_call_expression");
          Token (Name "function_call_expression");
        |];
        Token (Name "scoped_property_access_expression");
        Token (Name "member_access_expression");
        Token (Name "nullsafe_member_access_expression");
      |];
      Alt [|
        Token (Name "integer");
        Token (Name "float");
        Token (Name "string_");
        Token (Name "boolean");
        Token (Name "null");
      |];
      Token (Name "class_constant_access_expression");
      Token (Name "qualified_name");
      Token (Name "name");
      Token (Name "array_creation_expression");
      Token (Name "print_intrinsic");
      Token (Name "anonymous_function_creation_expression");
      Token (Name "arrow_function");
      Token (Name "object_creation_expression");
      Token (Name "update_expression");
      Token (Name "shell_command_expression");
      Token (Name "parenthesized_expression");
      Token (Name "throw_expression");
    |];
  );
  "print_intrinsic",
  Some (
    Seq [
      Token (Literal "print");
      Token (Name "expression");
    ];
  );
  "property_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "attribute_list");
      );
      Repeat1 (
        Token (Name "modifier");
      );
      Opt (
        Token (Name "type");
      );
      Token (Name "property_element");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "property_element");
        ];
      );
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "property_element",
  Some (
    Seq [
      Token (Name "variable_name");
      Opt (
        Token (Name "property_initializer");
      );
    ];
  );
  "property_initializer",
  Some (
    Seq [
      Token (Literal "=");
      Token (Name "expression");
    ];
  );
  "property_promotion_parameter",
  Some (
    Seq [
      Token (Name "visibility_modifier");
      Opt (
        Token (Name "type");
      );
      Token (Name "variable_name");
      Opt (
        Seq [
          Token (Literal "=");
          Token (Name "expression");
        ];
      );
    ];
  );
  "require_expression",
  Some (
    Seq [
      Token (Name "pat_requ");
      Token (Name "expression");
    ];
  );
  "require_once_expression",
  Some (
    Seq [
      Token (Name "pat_requ_once");
      Token (Name "expression");
    ];
  );
  "return_statement",
  Some (
    Seq [
      Token (Name "pat_ret");
      Opt (
        Token (Name "expression");
      );
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "scope_resolution_qualifier",
  Some (
    Alt [|
      Token (Name "relative_scope");
      Token (Name "name");
      Token (Name "reserved_identifier");
      Token (Name "qualified_name");
      Token (Name "dereferencable_expression");
    |];
  );
  "scoped_call_expression",
  Some (
    Seq [
      Token (Name "scope_resolution_qualifier");
      Token (Literal "::");
      Alt [|
        Alt [|
          Token (Name "reserved_identifier");
          Token (Name "name");
          Alt [|
            Token (Name "dynamic_variable_name");
            Token (Name "variable_name");
          |];
        |];
        Seq [
          Token (Literal "{");
          Token (Name "expression");
          Token (Literal "}");
        ];
      |];
      Token (Name "arguments");
    ];
  );
  "scoped_property_access_expression",
  Some (
    Seq [
      Token (Name "scope_resolution_qualifier");
      Token (Literal "::");
      Alt [|
        Token (Name "dynamic_variable_name");
        Token (Name "variable_name");
      |];
    ];
  );
  "sequence_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal ",");
      Alt [|
        Token (Name "sequence_expression");
        Token (Name "expression");
      |];
    ];
  );
  "simple_parameter",
  Some (
    Seq [
      Opt (
        Token (Name "attribute_list");
      );
      Opt (
        Token (Name "type");
      );
      Opt (
        Token (Literal "&");
      );
      Token (Name "variable_name");
      Opt (
        Seq [
          Token (Literal "=");
          Token (Name "expression");
        ];
      );
    ];
  );
  "static_variable_declaration",
  Some (
    Seq [
      Token (Name "variable_name");
      Opt (
        Seq [
          Token (Literal "=");
          Token (Name "expression");
        ];
      );
    ];
  );
  "subscript_expression",
  Some (
    Seq [
      Token (Name "dereferencable_expression");
      Alt [|
        Seq [
          Token (Literal "[");
          Opt (
            Token (Name "expression");
          );
          Token (Literal "]");
        ];
        Seq [
          Token (Literal "{");
          Token (Name "expression");
          Token (Literal "}");
        ];
      |];
    ];
  );
  "switch_block",
  Some (
    Alt [|
      Seq [
        Token (Literal "{");
        Repeat (
          Alt [|
            Token (Name "case_statement");
            Token (Name "default_statement");
          |];
        );
        Token (Literal "}");
      ];
      Seq [
        Token (Literal ":");
        Repeat (
          Alt [|
            Token (Name "case_statement");
            Token (Name "default_statement");
          |];
        );
        Token (Name "pat_ends");
        Alt [|
          Token (Name "automatic_semicolon");
          Token (Literal ";");
        |];
      ];
    |];
  );
  "switch_statement",
  Some (
    Seq [
      Token (Name "pat_switch");
      Token (Name "parenthesized_expression");
      Token (Name "switch_block");
    ];
  );
  "throw_expression",
  Some (
    Seq [
      Token (Name "pat_throw");
      Token (Name "expression");
    ];
  );
  "trait_declaration",
  Some (
    Seq [
      Token (Name "pat_trait");
      Token (Name "name");
      Token (Name "declaration_list");
    ];
  );
  "try_statement",
  Some (
    Seq [
      Token (Name "pat_try");
      Token (Name "compound_statement");
      Repeat1 (
        Alt [|
          Token (Name "catch_clause");
          Token (Name "finally_clause");
        |];
      );
    ];
  );
  "unary_expression",
  Some (
    Alt [|
      Token (Name "clone_expression");
      Token (Name "primary_expression");
      Token (Name "exponentiation_expression");
      Token (Name "unary_op_expression");
      Token (Name "cast_expression");
    |];
  );
  "unary_op_expression",
  Some (
    Alt [|
      Seq [
        Token (Literal "@");
        Token (Name "expression");
      ];
      Seq [
        Alt [|
          Token (Literal "+");
          Token (Literal "-");
          Token (Literal "~");
          Token (Literal "!");
        |];
        Token (Name "expression");
      ];
    |];
  );
  "unset_statement",
  Some (
    Seq [
      Token (Literal "unset");
      Token (Literal "(");
      Alt [|
        Token (Name "cast_variable");
        Alt [|
          Alt [|
            Token (Name "dynamic_variable_name");
            Token (Name "variable_name");
          |];
          Token (Name "subscript_expression");
          Token (Name "member_call_expression");
          Token (Name "nullsafe_member_call_expression");
          Token (Name "scoped_call_expression");
          Token (Name "function_call_expression");
        |];
        Token (Name "scoped_property_access_expression");
        Token (Name "member_access_expression");
        Token (Name "nullsafe_member_access_expression");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "cast_variable");
            Alt [|
              Alt [|
                Token (Name "dynamic_variable_name");
                Token (Name "variable_name");
              |];
              Token (Name "subscript_expression");
              Token (Name "member_call_expression");
              Token (Name "nullsafe_member_call_expression");
              Token (Name "scoped_call_expression");
              Token (Name "function_call_expression");
            |];
            Token (Name "scoped_property_access_expression");
            Token (Name "member_access_expression");
            Token (Name "nullsafe_member_access_expression");
          |];
        ];
      );
      Token (Literal ")");
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "update_expression",
  Some (
    Alt [|
      Seq [
        Alt [|
          Token (Name "cast_variable");
          Alt [|
            Alt [|
              Token (Name "dynamic_variable_name");
              Token (Name "variable_name");
            |];
            Token (Name "subscript_expression");
            Token (Name "member_call_expression");
            Token (Name "nullsafe_member_call_expression");
            Token (Name "scoped_call_expression");
            Token (Name "function_call_expression");
          |];
          Token (Name "scoped_property_access_expression");
          Token (Name "member_access_expression");
          Token (Name "nullsafe_member_access_expression");
        |];
        Token (Literal "++");
      ];
      Seq [
        Alt [|
          Token (Name "cast_variable");
          Alt [|
            Alt [|
              Token (Name "dynamic_variable_name");
              Token (Name "variable_name");
            |];
            Token (Name "subscript_expression");
            Token (Name "member_call_expression");
            Token (Name "nullsafe_member_call_expression");
            Token (Name "scoped_call_expression");
            Token (Name "function_call_expression");
          |];
          Token (Name "scoped_property_access_expression");
          Token (Name "member_access_expression");
          Token (Name "nullsafe_member_access_expression");
        |];
        Token (Literal "--");
      ];
      Seq [
        Token (Literal "++");
        Alt [|
          Token (Name "cast_variable");
          Alt [|
            Alt [|
              Token (Name "dynamic_variable_name");
              Token (Name "variable_name");
            |];
            Token (Name "subscript_expression");
            Token (Name "member_call_expression");
            Token (Name "nullsafe_member_call_expression");
            Token (Name "scoped_call_expression");
            Token (Name "function_call_expression");
          |];
          Token (Name "scoped_property_access_expression");
          Token (Name "member_access_expression");
          Token (Name "nullsafe_member_access_expression");
        |];
      ];
      Seq [
        Token (Literal "--");
        Alt [|
          Token (Name "cast_variable");
          Alt [|
            Alt [|
              Token (Name "dynamic_variable_name");
              Token (Name "variable_name");
            |];
            Token (Name "subscript_expression");
            Token (Name "member_call_expression");
            Token (Name "nullsafe_member_call_expression");
            Token (Name "scoped_call_expression");
            Token (Name "function_call_expression");
          |];
          Token (Name "scoped_property_access_expression");
          Token (Name "member_access_expression");
          Token (Name "nullsafe_member_access_expression");
        |];
      ];
    |];
  );
  "use_as_clause",
  Some (
    Seq [
      Alt [|
        Token (Name "class_constant_access_expression");
        Token (Name "name");
      |];
      Token (Name "pat_as");
      Alt [|
        Seq [
          Opt (
            Token (Name "visibility_modifier");
          );
          Token (Name "name");
        ];
        Seq [
          Token (Name "visibility_modifier");
          Opt (
            Token (Name "name");
          );
        ];
      |];
    ];
  );
  "use_declaration",
  Some (
    Seq [
      Token (Name "pat_use");
      Alt [|
        Token (Name "name");
        Token (Name "reserved_identifier");
        Token (Name "qualified_name");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "name");
            Token (Name "reserved_identifier");
            Token (Name "qualified_name");
          |];
        ];
      );
      Alt [|
        Token (Name "use_list");
        Alt [|
          Token (Name "automatic_semicolon");
          Token (Literal ";");
        |];
      |];
    ];
  );
  "use_instead_of_clause",
  Some (
    Seq [
      Alt [|
        Token (Name "class_constant_access_expression");
        Token (Name "name");
      |];
      Token (Name "pat_inst");
      Token (Name "name");
    ];
  );
  "use_list",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Seq [
          Alt [|
            Token (Name "use_instead_of_clause");
            Token (Name "use_as_clause");
          |];
          Alt [|
            Token (Name "automatic_semicolon");
            Token (Literal ";");
          |];
        ];
      );
      Token (Literal "}");
    ];
  );
  "variadic_parameter",
  Some (
    Seq [
      Opt (
        Token (Name "attribute_list");
      );
      Opt (
        Token (Name "type");
      );
      Opt (
        Token (Literal "&");
      );
      Token (Literal "...");
      Token (Name "variable_name");
    ];
  );
  "variadic_unpacking",
  Some (
    Seq [
      Token (Literal "...");
      Token (Name "expression");
    ];
  );
  "while_statement",
  Some (
    Seq [
      Token (Name "pat_while");
      Token (Name "parenthesized_expression");
      Alt [|
        Alt [|
          Token (Name "empty_statement");
          Token (Name "compound_statement");
          Token (Name "named_label_statement");
          Token (Name "expression_statement");
          Token (Name "if_statement");
          Token (Name "switch_statement");
          Token (Name "while_statement");
          Token (Name "do_statement");
          Token (Name "for_statement");
          Token (Name "foreach_statement");
          Token (Name "goto_statement");
          Token (Name "continue_statement");
          Token (Name "break_statement");
          Token (Name "return_statement");
          Token (Name "try_statement");
          Token (Name "declare_statement");
          Token (Name "echo_statement");
          Token (Name "unset_statement");
          Token (Name "const_declaration");
          Token (Name "function_definition");
          Token (Name "class_declaration");
          Token (Name "interface_declaration");
          Token (Name "trait_declaration");
          Token (Name "enum_declaration");
          Token (Name "namespace_definition");
          Token (Name "namespace_use_declaration");
          Token (Name "global_declaration");
          Token (Name "function_static_declaration");
        |];
        Seq [
          Token (Name "colon_block");
          Token (Name "pat_endw");
          Alt [|
            Token (Name "automatic_semicolon");
            Token (Literal ";");
          |];
        ];
      |];
    ];
  );
  "yield_expression",
  Some (
    Seq [
      Token (Literal "yield");
      Opt (
        Alt [|
          Token (Name "array_element_initializer");
          Seq [
            Token (Literal "from");
            Token (Name "expression");
          ];
        |];
      );
    ];
  );
  "program",
  Some (
    Seq [
      Opt (
        Token (Name "text");
      );
      Opt (
        Seq [
          Token (Name "php_tag");
          Repeat (
            Alt [|
              Token (Name "empty_statement");
              Token (Name "compound_statement");
              Token (Name "named_label_statement");
              Token (Name "expression_statement");
              Token (Name "if_statement");
              Token (Name "switch_statement");
              Token (Name "while_statement");
              Token (Name "do_statement");
              Token (Name "for_statement");
              Token (Name "foreach_statement");
              Token (Name "goto_statement");
              Token (Name "continue_statement");
              Token (Name "break_statement");
              Token (Name "return_statement");
              Token (Name "try_statement");
              Token (Name "declare_statement");
              Token (Name "echo_statement");
              Token (Name "unset_statement");
              Token (Name "const_declaration");
              Token (Name "function_definition");
              Token (Name "class_declaration");
              Token (Name "interface_declaration");
              Token (Name "trait_declaration");
              Token (Name "enum_declaration");
              Token (Name "namespace_definition");
              Token (Name "namespace_use_declaration");
              Token (Name "global_declaration");
              Token (Name "function_static_declaration");
            |];
          );
        ];
      );
    ];
  );
]

let trans_pat_else ((kind, body) : mt) : CST.pat_else =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_public ((kind, body) : mt) : CST.pat_public =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_echo ((kind, body) : mt) : CST.pat_echo =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_endd ((kind, body) : mt) : CST.pat_endd =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_final ((kind, body) : mt) : CST.pat_final =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_string_ ((kind, body) : mt) : CST.string_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_prec_n1_pat_524a507 ((kind, body) : mt) : CST.tok_prec_n1_pat_524a507 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_eof ((kind, body) : mt) : CST.eof =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_var_modifier ((kind, body) : mt) : CST.var_modifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_requ_once ((kind, body) : mt) : CST.pat_requ_once =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_use ((kind, body) : mt) : CST.pat_use =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_ends ((kind, body) : mt) : CST.pat_ends =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_prot ((kind, body) : mt) : CST.pat_prot =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_if ((kind, body) : mt) : CST.pat_if =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_cast_type ((kind, body) : mt) : CST.cast_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Array (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Bin (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Bool_c506ff1 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Bool_84e2c64 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Double (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Int_fa7153f (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Int_157db7d (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Float (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Obj (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Real (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Str (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Unset (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_pat_cont ((kind, body) : mt) : CST.pat_cont =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_endfor ((kind, body) : mt) : CST.pat_endfor =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_priv ((kind, body) : mt) : CST.pat_priv =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_requ ((kind, body) : mt) : CST.pat_requ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_name ((kind, body) : mt) : CST.pat_name =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_imples ((kind, body) : mt) : CST.pat_imples =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_automatic_semicolon ((kind, body) : mt) : CST.automatic_semicolon =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_float_ ((kind, body) : mt) : CST.float_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_name ((kind, body) : mt) : CST.name =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_48a4c46 ((kind, body) : mt) : CST.pat_48a4c46 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_match ((kind, body) : mt) : CST.pat_match =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_endw ((kind, body) : mt) : CST.pat_endw =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_goto ((kind, body) : mt) : CST.pat_goto =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_switch ((kind, body) : mt) : CST.pat_switch =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_comment ((kind, body) : mt) : CST.comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_empty_statement ((kind, body) : mt) : CST.empty_statement =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_fn ((kind, body) : mt) : CST.pat_fn =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_elseif ((kind, body) : mt) : CST.pat_elseif =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_heredoc ((kind, body) : mt) : CST.heredoc =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_while ((kind, body) : mt) : CST.pat_while =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_brk ((kind, body) : mt) : CST.pat_brk =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_global ((kind, body) : mt) : CST.pat_global =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_endif ((kind, body) : mt) : CST.pat_endif =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_f398476 ((kind, body) : mt) : CST.pat_f398476 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_extends ((kind, body) : mt) : CST.pat_extends =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_as ((kind, body) : mt) : CST.pat_as =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_fina ((kind, body) : mt) : CST.pat_fina =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_trait ((kind, body) : mt) : CST.pat_trait =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_enum ((kind, body) : mt) : CST.pat_enum =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_static ((kind, body) : mt) : CST.pat_static =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_null ((kind, body) : mt) : CST.null =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_inst_ ((kind, body) : mt) : CST.pat_inst_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_inte ((kind, body) : mt) : CST.pat_inte =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_e0610ac ((kind, body) : mt) : CST.pat_e0610ac =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_incl ((kind, body) : mt) : CST.pat_incl =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_endf ((kind, body) : mt) : CST.pat_endf =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_fore ((kind, body) : mt) : CST.pat_fore =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_do ((kind, body) : mt) : CST.pat_do =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_inst ((kind, body) : mt) : CST.pat_inst =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_const ((kind, body) : mt) : CST.pat_const =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_boolean ((kind, body) : mt) : CST.boolean =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_php_tag ((kind, body) : mt) : CST.php_tag =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_incl_once ((kind, body) : mt) : CST.pat_incl_once =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_shell_command_expression ((kind, body) : mt) : CST.shell_command_expression =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_abst ((kind, body) : mt) : CST.pat_abst =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_for ((kind, body) : mt) : CST.pat_for =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_case ((kind, body) : mt) : CST.pat_case =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_primitive_type ((kind, body) : mt) : CST.primitive_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Array (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Call (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Iter (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Bool (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Float (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Int (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Str (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Void (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Mixed (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Static (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `False (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Null (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_pat_catch ((kind, body) : mt) : CST.pat_catch =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_defa ((kind, body) : mt) : CST.pat_defa =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_b91d208 ((kind, body) : mt) : CST.pat_b91d208 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_func ((kind, body) : mt) : CST.pat_func =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_ret ((kind, body) : mt) : CST.pat_ret =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_try ((kind, body) : mt) : CST.pat_try =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_class ((kind, body) : mt) : CST.pat_class =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_throw ((kind, body) : mt) : CST.pat_throw =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_integer ((kind, body) : mt) : CST.integer =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_final_modifier ((kind, body) : mt) : CST.final_modifier =
  match body with
  | Children v ->
      trans_pat_final (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_visibility_modifier ((kind, body) : mt) : CST.visibility_modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_public (
            trans_pat_public (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_prot (
            trans_pat_prot (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Pat_priv (
            trans_pat_priv (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_named_label_statement ((kind, body) : mt) : CST.named_label_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_name (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_variable_name ((kind, body) : mt) : CST.variable_name =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_name (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_namespace_name ((kind, body) : mt) : CST.namespace_name =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_name (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_name (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_goto_statement ((kind, body) : mt) : CST.goto_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_goto (Run.matcher_token v0),
            trans_name (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_string__ ((kind, body) : mt) : CST.string__ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Str (
            trans_string_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Here (
            trans_heredoc (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_namespace_aliasing_clause ((kind, body) : mt) : CST.namespace_aliasing_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_as (Run.matcher_token v0),
            trans_name (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_static_modifier ((kind, body) : mt) : CST.static_modifier =
  match body with
  | Children v ->
      trans_pat_static (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_reserved_identifier ((kind, body) : mt) : CST.reserved_identifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Self (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Parent (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Pat_static (
            trans_pat_static (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_relative_scope ((kind, body) : mt) : CST.relative_scope =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Self (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Parent (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Pat_static (
            trans_pat_static (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_abstract_modifier ((kind, body) : mt) : CST.abstract_modifier =
  match body with
  | Children v ->
      trans_pat_abst (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_text ((kind, body) : mt) : CST.text =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Tok_prec_n1_pat_524a507 (
                trans_tok_prec_n1_pat_524a507 (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `Pat_b91d208 (
                trans_pat_b91d208 (Run.matcher_token v)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

let trans_anonymous_function_use_clause ((kind, body) : mt) : CST.anonymous_function_use_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            trans_pat_use (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            trans_variable_name (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v1
                      ,
                      trans_variable_name (Run.matcher_token v2)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v5
            ,
            Run.trans_token (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_namespace_name_as_prefix ((kind, body) : mt) : CST.namespace_name_as_prefix =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `BSLASH (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Opt_BSLASH_name_name_BSLASH (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.opt
                    (fun v -> Run.trans_token (Run.matcher_token v))
                    v0
                  ,
                  trans_namespace_name (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Pat_name_BSLASH (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_pat_name (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Pat_name_opt_BSLASH_name_name_BSLASH (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  trans_pat_name (Run.matcher_token v0),
                  Run.opt
                    (fun v -> Run.trans_token (Run.matcher_token v))
                    v1
                  ,
                  trans_namespace_name (Run.matcher_token v2),
                  Run.trans_token (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_declare_directive ((kind, body) : mt) : CST.declare_directive =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Ticks (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Enco (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Strict_types (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Int (
                  trans_integer (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Float (
                  trans_float_ (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Str_ (
                  trans_string__ (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Bool (
                  trans_boolean (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Null (
                  trans_null (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_namespace_use_group_clause ((kind, body) : mt) : CST.namespace_use_group_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Pat_func (
                      trans_pat_func (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Pat_const (
                      trans_pat_const (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            trans_namespace_name (Run.matcher_token v1),
            Run.opt
              (fun v ->
                trans_namespace_aliasing_clause (Run.matcher_token v)
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_modifier ((kind, body) : mt) : CST.modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Var_modi (
            trans_var_modifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Visi_modi (
            trans_visibility_modifier (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Static_modi (
            trans_static_modifier (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Final_modi (
            trans_final_modifier (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Abst_modi (
            trans_abstract_modifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_text_interpolation ((kind, body) : mt) : CST.text_interpolation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_text (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Php_tag (
                  trans_php_tag (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Eof (
                  trans_eof (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_qualified_name ((kind, body) : mt) : CST.qualified_name =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_namespace_name_as_prefix (Run.matcher_token v0),
            trans_name (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_namespace_use_group ((kind, body) : mt) : CST.namespace_use_group =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_namespace_use_group_clause (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_namespace_use_group_clause (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_base_clause ((kind, body) : mt) : CST.base_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_extends (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Name (
                  trans_name (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Rese_id (
                  trans_reserved_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Qual_name (
                  trans_qualified_name (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Name (
                            trans_name (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Rese_id (
                            trans_reserved_identifier (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Qual_name (
                            trans_qualified_name (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_namespace_use_clause ((kind, body) : mt) : CST.namespace_use_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Name (
                  trans_name (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Rese_id (
                  trans_reserved_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Qual_name (
                  trans_qualified_name (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                trans_namespace_aliasing_clause (Run.matcher_token v)
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_named_type ((kind, body) : mt) : CST.named_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Name (
            trans_name (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Qual_name (
            trans_qualified_name (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_class_interface_clause ((kind, body) : mt) : CST.class_interface_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_imples (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Name (
                  trans_name (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Rese_id (
                  trans_reserved_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Qual_name (
                  trans_qualified_name (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Name (
                            trans_name (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Rese_id (
                            trans_reserved_identifier (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Qual_name (
                            trans_qualified_name (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_namespace_use_declaration ((kind, body) : mt) : CST.namespace_use_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_pat_use (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Pat_func (
                      trans_pat_func (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Pat_const (
                      trans_pat_const (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Name_use_clause_rep_COMMA_name_use_clause (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_namespace_use_clause (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  trans_namespace_use_clause (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Opt_BSLASH_name_name_BSLASH_name_use_group (
                  (match v with
                  | Seq [v0; v1; v2; v3] ->
                      (
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v0
                        ,
                        trans_namespace_name (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2),
                        trans_namespace_use_group (Run.matcher_token v3)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            (match v3 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_type_list ((kind, body) : mt) : CST.type_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_named_type (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_named_type (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_optional_type ((kind, body) : mt) : CST.optional_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Named_type (
                  trans_named_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Prim_type (
                  trans_primitive_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_types ((kind, body) : mt) : CST.types =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Opt_type (
            trans_optional_type (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Named_type (
            trans_named_type (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Prim_type (
            trans_primitive_type (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_union_type ((kind, body) : mt) : CST.union_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_types (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_types (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_type_ ((kind, body) : mt) : CST.type_ =
  match body with
  | Children v ->
      trans_union_type (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_return_type ((kind, body) : mt) : CST.return_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_anonymous_function_creation_expression ((kind, body) : mt) : CST.anonymous_function_creation_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.opt
              (fun v -> trans_pat_static (Run.matcher_token v))
              v0
            ,
            trans_pat_func (Run.matcher_token v1),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            trans_formal_parameters (Run.matcher_token v3),
            Run.opt
              (fun v ->
                trans_anonymous_function_use_clause (Run.matcher_token v)
              )
              v4
            ,
            Run.opt
              (fun v -> trans_return_type (Run.matcher_token v))
              v5
            ,
            trans_compound_statement (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_argument ((kind, body) : mt) : CST.argument =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_name (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Vari_unpa (
                  trans_variadic_unpacking (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_arguments ((kind, body) : mt) : CST.arguments =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_argument (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_argument (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_creation_expression ((kind, body) : mt) : CST.array_creation_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Array_LPAR_opt_array_elem_init_rep_COMMA_array_elem_init_opt_COMMA_RPAR (
            (match v with
            | Seq [v0; v1; v2; v3; v4] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_array_element_initializer (Run.matcher_token v0),
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      Run.trans_token (Run.matcher_token v0),
                                      trans_array_element_initializer (Run.matcher_token v1)
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                    v2
                  ,
                  Run.opt
                    (fun v -> Run.trans_token (Run.matcher_token v))
                    v3
                  ,
                  Run.trans_token (Run.matcher_token v4)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `LBRACK_opt_array_elem_init_rep_COMMA_array_elem_init_opt_COMMA_RBRACK (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_array_element_initializer (Run.matcher_token v0),
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      Run.trans_token (Run.matcher_token v0),
                                      trans_array_element_initializer (Run.matcher_token v1)
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.opt
                    (fun v -> Run.trans_token (Run.matcher_token v))
                    v2
                  ,
                  Run.trans_token (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_destructing ((kind, body) : mt) : CST.array_destructing =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_array_dest (
                      (match v with
                      | Alt (0, v) ->
                          `Array_dest (
                            trans_array_destructing (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Choice_cast_var (
                            (match v with
                            | Alt (0, v) ->
                                `Cast_var (
                                  trans_cast_variable (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Choice_choice_dyna_var_name (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Choice_dyna_var_name (
                                        (match v with
                                        | Alt (0, v) ->
                                            `Dyna_var_name (
                                              trans_dynamic_variable_name (Run.matcher_token v)
                                            )
                                        | Alt (1, v) ->
                                            `Var_name (
                                              trans_variable_name (Run.matcher_token v)
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                  | Alt (1, v) ->
                                      `Subs_exp (
                                        trans_subscript_expression (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Member_call_exp (
                                        trans_member_call_expression (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `Null_member_call_exp (
                                        trans_nullsafe_member_call_expression (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Scoped_call_exp (
                                        trans_scoped_call_expression (Run.matcher_token v)
                                      )
                                  | Alt (5, v) ->
                                      `Func_call_exp (
                                        trans_function_call_expression (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | Alt (2, v) ->
                                `Scoped_prop_access_exp (
                                  trans_scoped_property_access_expression (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `Member_access_exp (
                                  trans_member_access_expression (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `Null_member_access_exp (
                                  trans_nullsafe_member_access_expression (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Exp_EQGT_choice_array_dest (
                      (match v with
                      | Seq [v0; v1; v2] ->
                          (
                            trans_expression (Run.matcher_token v0),
                            Run.trans_token (Run.matcher_token v1),
                            (match v2 with
                            | Alt (0, v) ->
                                `Array_dest (
                                  trans_array_destructing (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Choice_cast_var (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Cast_var (
                                        trans_cast_variable (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Choice_choice_dyna_var_name (
                                        (match v with
                                        | Alt (0, v) ->
                                            `Choice_dyna_var_name (
                                              (match v with
                                              | Alt (0, v) ->
                                                  `Dyna_var_name (
                                                    trans_dynamic_variable_name (Run.matcher_token v)
                                                  )
                                              | Alt (1, v) ->
                                                  `Var_name (
                                                    trans_variable_name (Run.matcher_token v)
                                                  )
                                              | _ -> assert false
                                              )
                                            )
                                        | Alt (1, v) ->
                                            `Subs_exp (
                                              trans_subscript_expression (Run.matcher_token v)
                                            )
                                        | Alt (2, v) ->
                                            `Member_call_exp (
                                              trans_member_call_expression (Run.matcher_token v)
                                            )
                                        | Alt (3, v) ->
                                            `Null_member_call_exp (
                                              trans_nullsafe_member_call_expression (Run.matcher_token v)
                                            )
                                        | Alt (4, v) ->
                                            `Scoped_call_exp (
                                              trans_scoped_call_expression (Run.matcher_token v)
                                            )
                                        | Alt (5, v) ->
                                            `Func_call_exp (
                                              trans_function_call_expression (Run.matcher_token v)
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                  | Alt (2, v) ->
                                      `Scoped_prop_access_exp (
                                        trans_scoped_property_access_expression (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `Member_access_exp (
                                        trans_member_access_expression (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Null_member_access_exp (
                                        trans_nullsafe_member_access_expression (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      Run.opt
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `Choice_array_dest (
                                (match v with
                                | Alt (0, v) ->
                                    `Array_dest (
                                      trans_array_destructing (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Choice_cast_var (
                                      (match v with
                                      | Alt (0, v) ->
                                          `Cast_var (
                                            trans_cast_variable (Run.matcher_token v)
                                          )
                                      | Alt (1, v) ->
                                          `Choice_choice_dyna_var_name (
                                            (match v with
                                            | Alt (0, v) ->
                                                `Choice_dyna_var_name (
                                                  (match v with
                                                  | Alt (0, v) ->
                                                      `Dyna_var_name (
                                                        trans_dynamic_variable_name (Run.matcher_token v)
                                                      )
                                                  | Alt (1, v) ->
                                                      `Var_name (
                                                        trans_variable_name (Run.matcher_token v)
                                                      )
                                                  | _ -> assert false
                                                  )
                                                )
                                            | Alt (1, v) ->
                                                `Subs_exp (
                                                  trans_subscript_expression (Run.matcher_token v)
                                                )
                                            | Alt (2, v) ->
                                                `Member_call_exp (
                                                  trans_member_call_expression (Run.matcher_token v)
                                                )
                                            | Alt (3, v) ->
                                                `Null_member_call_exp (
                                                  trans_nullsafe_member_call_expression (Run.matcher_token v)
                                                )
                                            | Alt (4, v) ->
                                                `Scoped_call_exp (
                                                  trans_scoped_call_expression (Run.matcher_token v)
                                                )
                                            | Alt (5, v) ->
                                                `Func_call_exp (
                                                  trans_function_call_expression (Run.matcher_token v)
                                                )
                                            | _ -> assert false
                                            )
                                          )
                                      | Alt (2, v) ->
                                          `Scoped_prop_access_exp (
                                            trans_scoped_property_access_expression (Run.matcher_token v)
                                          )
                                      | Alt (3, v) ->
                                          `Member_access_exp (
                                            trans_member_access_expression (Run.matcher_token v)
                                          )
                                      | Alt (4, v) ->
                                          `Null_member_access_exp (
                                            trans_nullsafe_member_access_expression (Run.matcher_token v)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                          | Alt (1, v) ->
                              `Exp_EQGT_choice_array_dest (
                                (match v with
                                | Seq [v0; v1; v2] ->
                                    (
                                      trans_expression (Run.matcher_token v0),
                                      Run.trans_token (Run.matcher_token v1),
                                      (match v2 with
                                      | Alt (0, v) ->
                                          `Array_dest (
                                            trans_array_destructing (Run.matcher_token v)
                                          )
                                      | Alt (1, v) ->
                                          `Choice_cast_var (
                                            (match v with
                                            | Alt (0, v) ->
                                                `Cast_var (
                                                  trans_cast_variable (Run.matcher_token v)
                                                )
                                            | Alt (1, v) ->
                                                `Choice_choice_dyna_var_name (
                                                  (match v with
                                                  | Alt (0, v) ->
                                                      `Choice_dyna_var_name (
                                                        (match v with
                                                        | Alt (0, v) ->
                                                            `Dyna_var_name (
                                                              trans_dynamic_variable_name (Run.matcher_token v)
                                                            )
                                                        | Alt (1, v) ->
                                                            `Var_name (
                                                              trans_variable_name (Run.matcher_token v)
                                                            )
                                                        | _ -> assert false
                                                        )
                                                      )
                                                  | Alt (1, v) ->
                                                      `Subs_exp (
                                                        trans_subscript_expression (Run.matcher_token v)
                                                      )
                                                  | Alt (2, v) ->
                                                      `Member_call_exp (
                                                        trans_member_call_expression (Run.matcher_token v)
                                                      )
                                                  | Alt (3, v) ->
                                                      `Null_member_call_exp (
                                                        trans_nullsafe_member_call_expression (Run.matcher_token v)
                                                      )
                                                  | Alt (4, v) ->
                                                      `Scoped_call_exp (
                                                        trans_scoped_call_expression (Run.matcher_token v)
                                                      )
                                                  | Alt (5, v) ->
                                                      `Func_call_exp (
                                                        trans_function_call_expression (Run.matcher_token v)
                                                      )
                                                  | _ -> assert false
                                                  )
                                                )
                                            | Alt (2, v) ->
                                                `Scoped_prop_access_exp (
                                                  trans_scoped_property_access_expression (Run.matcher_token v)
                                                )
                                            | Alt (3, v) ->
                                                `Member_access_exp (
                                                  trans_member_access_expression (Run.matcher_token v)
                                                )
                                            | Alt (4, v) ->
                                                `Null_member_access_exp (
                                                  trans_nullsafe_member_access_expression (Run.matcher_token v)
                                                )
                                            | _ -> assert false
                                            )
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_element_initializer ((kind, body) : mt) : CST.array_element_initializer =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Opt_AMP_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.opt
                    (fun v -> Run.trans_token (Run.matcher_token v))
                    v0
                  ,
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exp_EQGT_opt_AMP_exp (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  Run.opt
                    (fun v -> Run.trans_token (Run.matcher_token v))
                    v2
                  ,
                  trans_expression (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Vari_unpa (
            trans_variadic_unpacking (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_arrow_function ((kind, body) : mt) : CST.arrow_function =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.opt
              (fun v -> trans_static_modifier (Run.matcher_token v))
              v0
            ,
            trans_pat_fn (Run.matcher_token v1),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            trans_formal_parameters (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_return_type (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5),
            trans_expression (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_assignment_expression ((kind, body) : mt) : CST.assignment_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Choice_cast_var (
                  (match v with
                  | Alt (0, v) ->
                      `Cast_var (
                        trans_cast_variable (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Choice_choice_dyna_var_name (
                        (match v with
                        | Alt (0, v) ->
                            `Choice_dyna_var_name (
                              (match v with
                              | Alt (0, v) ->
                                  `Dyna_var_name (
                                    trans_dynamic_variable_name (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Var_name (
                                    trans_variable_name (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                            )
                        | Alt (1, v) ->
                            `Subs_exp (
                              trans_subscript_expression (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Member_call_exp (
                              trans_member_call_expression (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Null_member_call_exp (
                              trans_nullsafe_member_call_expression (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Scoped_call_exp (
                              trans_scoped_call_expression (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Func_call_exp (
                              trans_function_call_expression (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (2, v) ->
                      `Scoped_prop_access_exp (
                        trans_scoped_property_access_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Member_access_exp (
                        trans_member_access_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Null_member_access_exp (
                        trans_nullsafe_member_access_expression (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `List_lit (
                  trans_list_literal (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            trans_expression (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_attribute ((kind, body) : mt) : CST.attribute =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Name (
                  trans_name (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Rese_id (
                  trans_reserved_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Qual_name (
                  trans_qualified_name (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_arguments (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_attribute_list ((kind, body) : mt) : CST.attribute_list =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Seq [v0; v1; v2; v3] ->
              (
                Run.trans_token (Run.matcher_token v0),
                trans_attribute (Run.matcher_token v1),
                Run.repeat
                  (fun v ->
                    (match v with
                    | Seq [v0; v1] ->
                        (
                          Run.trans_token (Run.matcher_token v0),
                          trans_attribute (Run.matcher_token v1)
                        )
                    | _ -> assert false
                    )
                  )
                  v2
                ,
                Run.trans_token (Run.matcher_token v3)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

and trans_augmented_assignment_expression ((kind, body) : mt) : CST.augmented_assignment_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Cast_var (
                  trans_cast_variable (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_choice_dyna_var_name (
                  (match v with
                  | Alt (0, v) ->
                      `Choice_dyna_var_name (
                        (match v with
                        | Alt (0, v) ->
                            `Dyna_var_name (
                              trans_dynamic_variable_name (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Var_name (
                              trans_variable_name (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Subs_exp (
                        trans_subscript_expression (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Member_call_exp (
                        trans_member_call_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Null_member_call_exp (
                        trans_nullsafe_member_call_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Scoped_call_exp (
                        trans_scoped_call_expression (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Func_call_exp (
                        trans_function_call_expression (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Scoped_prop_access_exp (
                  trans_scoped_property_access_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Member_access_exp (
                  trans_member_access_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Null_member_access_exp (
                  trans_nullsafe_member_access_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `STARSTAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `STAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `SLASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `PERCEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `PLUSEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `DASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `DOTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `LTLTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `GTGTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `AMPEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `HATEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `BAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `QMARKQMARKEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binary_expression ((kind, body) : mt) : CST.binary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Un_exp_pat_inst__choice_qual_name (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_unary_expression (Run.matcher_token v0),
                  trans_pat_inst_ (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Qual_name (
                        trans_qualified_name (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Name (
                        trans_name (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Rese_id (
                        trans_reserved_identifier (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Subs_exp (
                        trans_subscript_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Member_access_exp (
                        trans_member_access_expression (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Null_member_access_exp (
                        trans_nullsafe_member_access_expression (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Scoped_prop_access_exp (
                        trans_scoped_property_access_expression (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Choice_dyna_var_name (
                        (match v with
                        | Alt (0, v) ->
                            `Dyna_var_name (
                              trans_dynamic_variable_name (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Var_name (
                              trans_variable_name (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exp_QMARKQMARK_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Exp_pat_e0610ac_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  trans_pat_e0610ac (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Exp_pat_48a4c46_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  trans_pat_48a4c46 (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Exp_pat_f398476_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  trans_pat_f398476 (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (5, v) ->
          `Exp_BARBAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (6, v) ->
          `Exp_AMPAMP_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (7, v) ->
          `Exp_BAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (8, v) ->
          `Exp_HAT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (9, v) ->
          `Exp_AMP_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (10, v) ->
          `Exp_EQEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (11, v) ->
          `Exp_BANGEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (12, v) ->
          `Exp_LTGT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (13, v) ->
          `Exp_EQEQEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (14, v) ->
          `Exp_BANGEQEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (15, v) ->
          `Exp_LT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (16, v) ->
          `Exp_GT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (17, v) ->
          `Exp_LTEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (18, v) ->
          `Exp_GTEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (19, v) ->
          `Exp_LTEQGT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (20, v) ->
          `Exp_LTLT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (21, v) ->
          `Exp_GTGT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (22, v) ->
          `Exp_PLUS_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (23, v) ->
          `Exp_DASH_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (24, v) ->
          `Exp_DOT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (25, v) ->
          `Exp_STAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (26, v) ->
          `Exp_SLASH_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (27, v) ->
          `Exp_PERC_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_break_statement ((kind, body) : mt) : CST.break_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_brk (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_case_statement ((kind, body) : mt) : CST.case_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_pat_case (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `COLON (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Comp_stmt (
                      trans_compound_statement (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Named_label_stmt (
                      trans_named_label_statement (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Exp_stmt (
                      trans_expression_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `If_stmt (
                      trans_if_statement (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Switch_stmt (
                      trans_switch_statement (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `While_stmt (
                      trans_while_statement (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Do_stmt (
                      trans_do_statement (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `For_stmt (
                      trans_for_statement (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Fore_stmt (
                      trans_foreach_statement (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Goto_stmt (
                      trans_goto_statement (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Cont_stmt (
                      trans_continue_statement (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `Ret_stmt (
                      trans_return_statement (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `Try_stmt (
                      trans_try_statement (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Decl_stmt (
                      trans_declare_statement (Run.matcher_token v)
                    )
                | Alt (16, v) ->
                    `Echo_stmt (
                      trans_echo_statement (Run.matcher_token v)
                    )
                | Alt (17, v) ->
                    `Unset_stmt (
                      trans_unset_statement (Run.matcher_token v)
                    )
                | Alt (18, v) ->
                    `Const_decl (
                      trans_const_declaration (Run.matcher_token v)
                    )
                | Alt (19, v) ->
                    `Func_defi (
                      trans_function_definition (Run.matcher_token v)
                    )
                | Alt (20, v) ->
                    `Class_decl (
                      trans_class_declaration (Run.matcher_token v)
                    )
                | Alt (21, v) ->
                    `Inte_decl (
                      trans_interface_declaration (Run.matcher_token v)
                    )
                | Alt (22, v) ->
                    `Trait_decl (
                      trans_trait_declaration (Run.matcher_token v)
                    )
                | Alt (23, v) ->
                    `Enum_decl (
                      trans_enum_declaration (Run.matcher_token v)
                    )
                | Alt (24, v) ->
                    `Name_defi (
                      trans_namespace_definition (Run.matcher_token v)
                    )
                | Alt (25, v) ->
                    `Name_use_decl (
                      trans_namespace_use_declaration (Run.matcher_token v)
                    )
                | Alt (26, v) ->
                    `Global_decl (
                      trans_global_declaration (Run.matcher_token v)
                    )
                | Alt (27, v) ->
                    `Func_static_decl (
                      trans_function_static_declaration (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_cast_expression ((kind, body) : mt) : CST.cast_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_cast_type (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_unary_expression (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_cast_variable ((kind, body) : mt) : CST.cast_variable =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_cast_type (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Cast_var (
                  trans_cast_variable (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_choice_dyna_var_name (
                  (match v with
                  | Alt (0, v) ->
                      `Choice_dyna_var_name (
                        (match v with
                        | Alt (0, v) ->
                            `Dyna_var_name (
                              trans_dynamic_variable_name (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Var_name (
                              trans_variable_name (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Subs_exp (
                        trans_subscript_expression (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Member_call_exp (
                        trans_member_call_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Null_member_call_exp (
                        trans_nullsafe_member_call_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Scoped_call_exp (
                        trans_scoped_call_expression (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Func_call_exp (
                        trans_function_call_expression (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Scoped_prop_access_exp (
                  trans_scoped_property_access_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Member_access_exp (
                  trans_member_access_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Null_member_access_exp (
                  trans_nullsafe_member_access_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_catch_clause ((kind, body) : mt) : CST.catch_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            trans_pat_catch (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_type_list (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_variable_name (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4),
            trans_compound_statement (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_const_declaration ((kind, body) : mt) : CST.class_const_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_attribute_list (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> trans_final_modifier (Run.matcher_token v))
              v1
            ,
            trans_const_declaration_ (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_constant_access_expression ((kind, body) : mt) : CST.class_constant_access_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_scope_resolution_qualifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Name (
                  trans_name (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Rese_id (
                  trans_reserved_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_declaration ((kind, body) : mt) : CST.class_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7] ->
          (
            Run.opt
              (fun v -> trans_attribute_list (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Final_modi (
                      trans_final_modifier (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Abst_modi (
                      trans_abstract_modifier (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_pat_class (Run.matcher_token v2),
            trans_name (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_base_clause (Run.matcher_token v))
              v4
            ,
            Run.opt
              (fun v ->
                trans_class_interface_clause (Run.matcher_token v)
              )
              v5
            ,
            trans_declaration_list (Run.matcher_token v6),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Auto_semi (
                      trans_automatic_semicolon (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `SEMI (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v7
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_clone_expression ((kind, body) : mt) : CST.clone_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_primary_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_colon_block ((kind, body) : mt) : CST.colon_block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Comp_stmt (
                      trans_compound_statement (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Named_label_stmt (
                      trans_named_label_statement (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Exp_stmt (
                      trans_expression_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `If_stmt (
                      trans_if_statement (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Switch_stmt (
                      trans_switch_statement (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `While_stmt (
                      trans_while_statement (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Do_stmt (
                      trans_do_statement (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `For_stmt (
                      trans_for_statement (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Fore_stmt (
                      trans_foreach_statement (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Goto_stmt (
                      trans_goto_statement (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Cont_stmt (
                      trans_continue_statement (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `Ret_stmt (
                      trans_return_statement (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `Try_stmt (
                      trans_try_statement (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Decl_stmt (
                      trans_declare_statement (Run.matcher_token v)
                    )
                | Alt (16, v) ->
                    `Echo_stmt (
                      trans_echo_statement (Run.matcher_token v)
                    )
                | Alt (17, v) ->
                    `Unset_stmt (
                      trans_unset_statement (Run.matcher_token v)
                    )
                | Alt (18, v) ->
                    `Const_decl (
                      trans_const_declaration (Run.matcher_token v)
                    )
                | Alt (19, v) ->
                    `Func_defi (
                      trans_function_definition (Run.matcher_token v)
                    )
                | Alt (20, v) ->
                    `Class_decl (
                      trans_class_declaration (Run.matcher_token v)
                    )
                | Alt (21, v) ->
                    `Inte_decl (
                      trans_interface_declaration (Run.matcher_token v)
                    )
                | Alt (22, v) ->
                    `Trait_decl (
                      trans_trait_declaration (Run.matcher_token v)
                    )
                | Alt (23, v) ->
                    `Enum_decl (
                      trans_enum_declaration (Run.matcher_token v)
                    )
                | Alt (24, v) ->
                    `Name_defi (
                      trans_namespace_definition (Run.matcher_token v)
                    )
                | Alt (25, v) ->
                    `Name_use_decl (
                      trans_namespace_use_declaration (Run.matcher_token v)
                    )
                | Alt (26, v) ->
                    `Global_decl (
                      trans_global_declaration (Run.matcher_token v)
                    )
                | Alt (27, v) ->
                    `Func_static_decl (
                      trans_function_static_declaration (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_compound_statement ((kind, body) : mt) : CST.compound_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Comp_stmt (
                      trans_compound_statement (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Named_label_stmt (
                      trans_named_label_statement (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Exp_stmt (
                      trans_expression_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `If_stmt (
                      trans_if_statement (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Switch_stmt (
                      trans_switch_statement (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `While_stmt (
                      trans_while_statement (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Do_stmt (
                      trans_do_statement (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `For_stmt (
                      trans_for_statement (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Fore_stmt (
                      trans_foreach_statement (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Goto_stmt (
                      trans_goto_statement (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Cont_stmt (
                      trans_continue_statement (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `Ret_stmt (
                      trans_return_statement (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `Try_stmt (
                      trans_try_statement (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Decl_stmt (
                      trans_declare_statement (Run.matcher_token v)
                    )
                | Alt (16, v) ->
                    `Echo_stmt (
                      trans_echo_statement (Run.matcher_token v)
                    )
                | Alt (17, v) ->
                    `Unset_stmt (
                      trans_unset_statement (Run.matcher_token v)
                    )
                | Alt (18, v) ->
                    `Const_decl (
                      trans_const_declaration (Run.matcher_token v)
                    )
                | Alt (19, v) ->
                    `Func_defi (
                      trans_function_definition (Run.matcher_token v)
                    )
                | Alt (20, v) ->
                    `Class_decl (
                      trans_class_declaration (Run.matcher_token v)
                    )
                | Alt (21, v) ->
                    `Inte_decl (
                      trans_interface_declaration (Run.matcher_token v)
                    )
                | Alt (22, v) ->
                    `Trait_decl (
                      trans_trait_declaration (Run.matcher_token v)
                    )
                | Alt (23, v) ->
                    `Enum_decl (
                      trans_enum_declaration (Run.matcher_token v)
                    )
                | Alt (24, v) ->
                    `Name_defi (
                      trans_namespace_definition (Run.matcher_token v)
                    )
                | Alt (25, v) ->
                    `Name_use_decl (
                      trans_namespace_use_declaration (Run.matcher_token v)
                    )
                | Alt (26, v) ->
                    `Global_decl (
                      trans_global_declaration (Run.matcher_token v)
                    )
                | Alt (27, v) ->
                    `Func_static_decl (
                      trans_function_static_declaration (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_conditional_expression ((kind, body) : mt) : CST.conditional_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            trans_expression (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_const_declaration ((kind, body) : mt) : CST.const_declaration =
  match body with
  | Children v ->
      trans_const_declaration_ (Run.matcher_token v)
  | Leaf _ -> assert false

and trans_const_declaration_ ((kind, body) : mt) : CST.const_declaration_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_visibility_modifier (Run.matcher_token v))
              v0
            ,
            trans_pat_const (Run.matcher_token v1),
            trans_const_element (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_const_element (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            (match v4 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_const_element ((kind, body) : mt) : CST.const_element =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Name (
                  trans_name (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Rese_id (
                  trans_reserved_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_continue_statement ((kind, body) : mt) : CST.continue_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_cont (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_declaration_list ((kind, body) : mt) : CST.declaration_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v -> trans_member_declaration (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_declare_statement ((kind, body) : mt) : CST.declare_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_declare_directive (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            (match v4 with
            | Alt (0, v) ->
                `Choice_empty_stmt (
                  (match v with
                  | Alt (0, v) ->
                      `Empty_stmt (
                        trans_empty_statement (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Comp_stmt (
                        trans_compound_statement (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Named_label_stmt (
                        trans_named_label_statement (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Exp_stmt (
                        trans_expression_statement (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `If_stmt (
                        trans_if_statement (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Switch_stmt (
                        trans_switch_statement (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `While_stmt (
                        trans_while_statement (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Do_stmt (
                        trans_do_statement (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `For_stmt (
                        trans_for_statement (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Fore_stmt (
                        trans_foreach_statement (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Goto_stmt (
                        trans_goto_statement (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `Cont_stmt (
                        trans_continue_statement (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Brk_stmt (
                        trans_break_statement (Run.matcher_token v)
                      )
                  | Alt (13, v) ->
                      `Ret_stmt (
                        trans_return_statement (Run.matcher_token v)
                      )
                  | Alt (14, v) ->
                      `Try_stmt (
                        trans_try_statement (Run.matcher_token v)
                      )
                  | Alt (15, v) ->
                      `Decl_stmt (
                        trans_declare_statement (Run.matcher_token v)
                      )
                  | Alt (16, v) ->
                      `Echo_stmt (
                        trans_echo_statement (Run.matcher_token v)
                      )
                  | Alt (17, v) ->
                      `Unset_stmt (
                        trans_unset_statement (Run.matcher_token v)
                      )
                  | Alt (18, v) ->
                      `Const_decl (
                        trans_const_declaration (Run.matcher_token v)
                      )
                  | Alt (19, v) ->
                      `Func_defi (
                        trans_function_definition (Run.matcher_token v)
                      )
                  | Alt (20, v) ->
                      `Class_decl (
                        trans_class_declaration (Run.matcher_token v)
                      )
                  | Alt (21, v) ->
                      `Inte_decl (
                        trans_interface_declaration (Run.matcher_token v)
                      )
                  | Alt (22, v) ->
                      `Trait_decl (
                        trans_trait_declaration (Run.matcher_token v)
                      )
                  | Alt (23, v) ->
                      `Enum_decl (
                        trans_enum_declaration (Run.matcher_token v)
                      )
                  | Alt (24, v) ->
                      `Name_defi (
                        trans_namespace_definition (Run.matcher_token v)
                      )
                  | Alt (25, v) ->
                      `Name_use_decl (
                        trans_namespace_use_declaration (Run.matcher_token v)
                      )
                  | Alt (26, v) ->
                      `Global_decl (
                        trans_global_declaration (Run.matcher_token v)
                      )
                  | Alt (27, v) ->
                      `Func_static_decl (
                        trans_function_static_declaration (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `COLON_rep_choice_empty_stmt_pat_endd_choice_auto_semi (
                  (match v with
                  | Seq [v0; v1; v2; v3] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Alt (0, v) ->
                                `Empty_stmt (
                                  trans_empty_statement (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Comp_stmt (
                                  trans_compound_statement (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Named_label_stmt (
                                  trans_named_label_statement (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `Exp_stmt (
                                  trans_expression_statement (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `If_stmt (
                                  trans_if_statement (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `Switch_stmt (
                                  trans_switch_statement (Run.matcher_token v)
                                )
                            | Alt (6, v) ->
                                `While_stmt (
                                  trans_while_statement (Run.matcher_token v)
                                )
                            | Alt (7, v) ->
                                `Do_stmt (
                                  trans_do_statement (Run.matcher_token v)
                                )
                            | Alt (8, v) ->
                                `For_stmt (
                                  trans_for_statement (Run.matcher_token v)
                                )
                            | Alt (9, v) ->
                                `Fore_stmt (
                                  trans_foreach_statement (Run.matcher_token v)
                                )
                            | Alt (10, v) ->
                                `Goto_stmt (
                                  trans_goto_statement (Run.matcher_token v)
                                )
                            | Alt (11, v) ->
                                `Cont_stmt (
                                  trans_continue_statement (Run.matcher_token v)
                                )
                            | Alt (12, v) ->
                                `Brk_stmt (
                                  trans_break_statement (Run.matcher_token v)
                                )
                            | Alt (13, v) ->
                                `Ret_stmt (
                                  trans_return_statement (Run.matcher_token v)
                                )
                            | Alt (14, v) ->
                                `Try_stmt (
                                  trans_try_statement (Run.matcher_token v)
                                )
                            | Alt (15, v) ->
                                `Decl_stmt (
                                  trans_declare_statement (Run.matcher_token v)
                                )
                            | Alt (16, v) ->
                                `Echo_stmt (
                                  trans_echo_statement (Run.matcher_token v)
                                )
                            | Alt (17, v) ->
                                `Unset_stmt (
                                  trans_unset_statement (Run.matcher_token v)
                                )
                            | Alt (18, v) ->
                                `Const_decl (
                                  trans_const_declaration (Run.matcher_token v)
                                )
                            | Alt (19, v) ->
                                `Func_defi (
                                  trans_function_definition (Run.matcher_token v)
                                )
                            | Alt (20, v) ->
                                `Class_decl (
                                  trans_class_declaration (Run.matcher_token v)
                                )
                            | Alt (21, v) ->
                                `Inte_decl (
                                  trans_interface_declaration (Run.matcher_token v)
                                )
                            | Alt (22, v) ->
                                `Trait_decl (
                                  trans_trait_declaration (Run.matcher_token v)
                                )
                            | Alt (23, v) ->
                                `Enum_decl (
                                  trans_enum_declaration (Run.matcher_token v)
                                )
                            | Alt (24, v) ->
                                `Name_defi (
                                  trans_namespace_definition (Run.matcher_token v)
                                )
                            | Alt (25, v) ->
                                `Name_use_decl (
                                  trans_namespace_use_declaration (Run.matcher_token v)
                                )
                            | Alt (26, v) ->
                                `Global_decl (
                                  trans_global_declaration (Run.matcher_token v)
                                )
                            | Alt (27, v) ->
                                `Func_static_decl (
                                  trans_function_static_declaration (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        trans_pat_endd (Run.matcher_token v2),
                        (match v3 with
                        | Alt (0, v) ->
                            `Auto_semi (
                              trans_automatic_semicolon (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `SEMI (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Choice_auto_semi (
                  (match v with
                  | Alt (0, v) ->
                      `Auto_semi (
                        trans_automatic_semicolon (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `SEMI (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_default_statement ((kind, body) : mt) : CST.default_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_defa (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `COLON (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Comp_stmt (
                      trans_compound_statement (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Named_label_stmt (
                      trans_named_label_statement (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Exp_stmt (
                      trans_expression_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `If_stmt (
                      trans_if_statement (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Switch_stmt (
                      trans_switch_statement (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `While_stmt (
                      trans_while_statement (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Do_stmt (
                      trans_do_statement (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `For_stmt (
                      trans_for_statement (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Fore_stmt (
                      trans_foreach_statement (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Goto_stmt (
                      trans_goto_statement (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Cont_stmt (
                      trans_continue_statement (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `Ret_stmt (
                      trans_return_statement (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `Try_stmt (
                      trans_try_statement (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Decl_stmt (
                      trans_declare_statement (Run.matcher_token v)
                    )
                | Alt (16, v) ->
                    `Echo_stmt (
                      trans_echo_statement (Run.matcher_token v)
                    )
                | Alt (17, v) ->
                    `Unset_stmt (
                      trans_unset_statement (Run.matcher_token v)
                    )
                | Alt (18, v) ->
                    `Const_decl (
                      trans_const_declaration (Run.matcher_token v)
                    )
                | Alt (19, v) ->
                    `Func_defi (
                      trans_function_definition (Run.matcher_token v)
                    )
                | Alt (20, v) ->
                    `Class_decl (
                      trans_class_declaration (Run.matcher_token v)
                    )
                | Alt (21, v) ->
                    `Inte_decl (
                      trans_interface_declaration (Run.matcher_token v)
                    )
                | Alt (22, v) ->
                    `Trait_decl (
                      trans_trait_declaration (Run.matcher_token v)
                    )
                | Alt (23, v) ->
                    `Enum_decl (
                      trans_enum_declaration (Run.matcher_token v)
                    )
                | Alt (24, v) ->
                    `Name_defi (
                      trans_namespace_definition (Run.matcher_token v)
                    )
                | Alt (25, v) ->
                    `Name_use_decl (
                      trans_namespace_use_declaration (Run.matcher_token v)
                    )
                | Alt (26, v) ->
                    `Global_decl (
                      trans_global_declaration (Run.matcher_token v)
                    )
                | Alt (27, v) ->
                    `Func_static_decl (
                      trans_function_static_declaration (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_dereferencable_expression ((kind, body) : mt) : CST.dereferencable_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_cast_var (
            (match v with
            | Alt (0, v) ->
                `Cast_var (
                  trans_cast_variable (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_choice_dyna_var_name (
                  (match v with
                  | Alt (0, v) ->
                      `Choice_dyna_var_name (
                        (match v with
                        | Alt (0, v) ->
                            `Dyna_var_name (
                              trans_dynamic_variable_name (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Var_name (
                              trans_variable_name (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Subs_exp (
                        trans_subscript_expression (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Member_call_exp (
                        trans_member_call_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Null_member_call_exp (
                        trans_nullsafe_member_call_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Scoped_call_exp (
                        trans_scoped_call_expression (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Func_call_exp (
                        trans_function_call_expression (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Scoped_prop_access_exp (
                  trans_scoped_property_access_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Member_access_exp (
                  trans_member_access_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Null_member_access_exp (
                  trans_nullsafe_member_access_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Class_cst_access_exp (
            trans_class_constant_access_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Paren_exp (
            trans_parenthesized_expression (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Array_crea_exp (
            trans_array_creation_expression (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Name (
            trans_name (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Rese_id (
            trans_reserved_identifier (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Qual_name (
            trans_qualified_name (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Str_ (
            trans_string__ (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_do_statement ((kind, body) : mt) : CST.do_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_pat_do (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Empty_stmt (
                  trans_empty_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Named_label_stmt (
                  trans_named_label_statement (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Exp_stmt (
                  trans_expression_statement (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Switch_stmt (
                  trans_switch_statement (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Do_stmt (
                  trans_do_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Fore_stmt (
                  trans_foreach_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Goto_stmt (
                  trans_goto_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Cont_stmt (
                  trans_continue_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Brk_stmt (
                  trans_break_statement (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `Ret_stmt (
                  trans_return_statement (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Try_stmt (
                  trans_try_statement (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Decl_stmt (
                  trans_declare_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Echo_stmt (
                  trans_echo_statement (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `Unset_stmt (
                  trans_unset_statement (Run.matcher_token v)
                )
            | Alt (18, v) ->
                `Const_decl (
                  trans_const_declaration (Run.matcher_token v)
                )
            | Alt (19, v) ->
                `Func_defi (
                  trans_function_definition (Run.matcher_token v)
                )
            | Alt (20, v) ->
                `Class_decl (
                  trans_class_declaration (Run.matcher_token v)
                )
            | Alt (21, v) ->
                `Inte_decl (
                  trans_interface_declaration (Run.matcher_token v)
                )
            | Alt (22, v) ->
                `Trait_decl (
                  trans_trait_declaration (Run.matcher_token v)
                )
            | Alt (23, v) ->
                `Enum_decl (
                  trans_enum_declaration (Run.matcher_token v)
                )
            | Alt (24, v) ->
                `Name_defi (
                  trans_namespace_definition (Run.matcher_token v)
                )
            | Alt (25, v) ->
                `Name_use_decl (
                  trans_namespace_use_declaration (Run.matcher_token v)
                )
            | Alt (26, v) ->
                `Global_decl (
                  trans_global_declaration (Run.matcher_token v)
                )
            | Alt (27, v) ->
                `Func_static_decl (
                  trans_function_static_declaration (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_pat_while (Run.matcher_token v2),
            trans_parenthesized_expression (Run.matcher_token v3),
            (match v4 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_dynamic_variable_name ((kind, body) : mt) : CST.dynamic_variable_name =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `DOLLAR_choice_dyna_var_name (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `Dyna_var_name (
                        trans_dynamic_variable_name (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Var_name (
                        trans_variable_name (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `DOLLAR_LCURL_exp_RCURL (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2),
                  Run.trans_token (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_echo_statement ((kind, body) : mt) : CST.echo_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_echo (Run.matcher_token v0),
            trans_expressions (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_else_clause ((kind, body) : mt) : CST.else_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_else (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Empty_stmt (
                  trans_empty_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Named_label_stmt (
                  trans_named_label_statement (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Exp_stmt (
                  trans_expression_statement (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Switch_stmt (
                  trans_switch_statement (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Do_stmt (
                  trans_do_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Fore_stmt (
                  trans_foreach_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Goto_stmt (
                  trans_goto_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Cont_stmt (
                  trans_continue_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Brk_stmt (
                  trans_break_statement (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `Ret_stmt (
                  trans_return_statement (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Try_stmt (
                  trans_try_statement (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Decl_stmt (
                  trans_declare_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Echo_stmt (
                  trans_echo_statement (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `Unset_stmt (
                  trans_unset_statement (Run.matcher_token v)
                )
            | Alt (18, v) ->
                `Const_decl (
                  trans_const_declaration (Run.matcher_token v)
                )
            | Alt (19, v) ->
                `Func_defi (
                  trans_function_definition (Run.matcher_token v)
                )
            | Alt (20, v) ->
                `Class_decl (
                  trans_class_declaration (Run.matcher_token v)
                )
            | Alt (21, v) ->
                `Inte_decl (
                  trans_interface_declaration (Run.matcher_token v)
                )
            | Alt (22, v) ->
                `Trait_decl (
                  trans_trait_declaration (Run.matcher_token v)
                )
            | Alt (23, v) ->
                `Enum_decl (
                  trans_enum_declaration (Run.matcher_token v)
                )
            | Alt (24, v) ->
                `Name_defi (
                  trans_namespace_definition (Run.matcher_token v)
                )
            | Alt (25, v) ->
                `Name_use_decl (
                  trans_namespace_use_declaration (Run.matcher_token v)
                )
            | Alt (26, v) ->
                `Global_decl (
                  trans_global_declaration (Run.matcher_token v)
                )
            | Alt (27, v) ->
                `Func_static_decl (
                  trans_function_static_declaration (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_else_clause_2 ((kind, body) : mt) : CST.else_clause_2 =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_else (Run.matcher_token v0),
            trans_colon_block (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_else_if_clause ((kind, body) : mt) : CST.else_if_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_elseif (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Empty_stmt (
                  trans_empty_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Named_label_stmt (
                  trans_named_label_statement (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Exp_stmt (
                  trans_expression_statement (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Switch_stmt (
                  trans_switch_statement (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Do_stmt (
                  trans_do_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Fore_stmt (
                  trans_foreach_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Goto_stmt (
                  trans_goto_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Cont_stmt (
                  trans_continue_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Brk_stmt (
                  trans_break_statement (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `Ret_stmt (
                  trans_return_statement (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Try_stmt (
                  trans_try_statement (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Decl_stmt (
                  trans_declare_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Echo_stmt (
                  trans_echo_statement (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `Unset_stmt (
                  trans_unset_statement (Run.matcher_token v)
                )
            | Alt (18, v) ->
                `Const_decl (
                  trans_const_declaration (Run.matcher_token v)
                )
            | Alt (19, v) ->
                `Func_defi (
                  trans_function_definition (Run.matcher_token v)
                )
            | Alt (20, v) ->
                `Class_decl (
                  trans_class_declaration (Run.matcher_token v)
                )
            | Alt (21, v) ->
                `Inte_decl (
                  trans_interface_declaration (Run.matcher_token v)
                )
            | Alt (22, v) ->
                `Trait_decl (
                  trans_trait_declaration (Run.matcher_token v)
                )
            | Alt (23, v) ->
                `Enum_decl (
                  trans_enum_declaration (Run.matcher_token v)
                )
            | Alt (24, v) ->
                `Name_defi (
                  trans_namespace_definition (Run.matcher_token v)
                )
            | Alt (25, v) ->
                `Name_use_decl (
                  trans_namespace_use_declaration (Run.matcher_token v)
                )
            | Alt (26, v) ->
                `Global_decl (
                  trans_global_declaration (Run.matcher_token v)
                )
            | Alt (27, v) ->
                `Func_static_decl (
                  trans_function_static_declaration (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_else_if_clause_2 ((kind, body) : mt) : CST.else_if_clause_2 =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_elseif (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            trans_colon_block (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enum_case ((kind, body) : mt) : CST.enum_case =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_attribute_list (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_name (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Str (
                            trans_string_ (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Int (
                            trans_integer (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            (match v4 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enum_declaration ((kind, body) : mt) : CST.enum_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.opt
              (fun v -> trans_attribute_list (Run.matcher_token v))
              v0
            ,
            trans_pat_enum (Run.matcher_token v1),
            trans_name (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v ->
                trans_class_interface_clause (Run.matcher_token v)
              )
              v4
            ,
            trans_enum_declaration_list (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enum_declaration_list ((kind, body) : mt) : CST.enum_declaration_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                trans_enum_member_declaration (Run.matcher_token v)
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enum_member_declaration ((kind, body) : mt) : CST.enum_member_declaration =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Enum_case (
            trans_enum_case (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Meth_decl (
            trans_method_declaration (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Use_decl (
            trans_use_declaration (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_exponentiation_expression ((kind, body) : mt) : CST.exponentiation_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Clone_exp (
                  trans_clone_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Prim_exp (
                  trans_primary_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Expo_exp (
                  trans_exponentiation_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Clone_exp (
                  trans_clone_expression (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Prim_exp (
                  trans_primary_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression ((kind, body) : mt) : CST.expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Cond_exp (
            trans_conditional_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Match_exp (
            trans_match_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Augm_assign_exp (
            trans_augmented_assignment_expression (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Assign_exp (
            trans_assignment_expression (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Yield_exp (
            trans_yield_expression (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Un_exp (
            trans_unary_expression (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Bin_exp (
            trans_binary_expression (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Incl_exp (
            trans_include_expression (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Incl_once_exp (
            trans_include_once_expression (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Requ_exp (
            trans_require_expression (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Requ_once_exp (
            trans_require_once_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression_statement ((kind, body) : mt) : CST.expression_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expressions ((kind, body) : mt) : CST.expressions =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp (
            trans_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Seq_exp (
            trans_sequence_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_finally_clause ((kind, body) : mt) : CST.finally_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_fina (Run.matcher_token v0),
            trans_compound_statement (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_statement ((kind, body) : mt) : CST.for_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8] ->
          (
            trans_pat_for (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_expressions (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_expressions (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5),
            Run.opt
              (fun v -> trans_expressions (Run.matcher_token v))
              v6
            ,
            Run.trans_token (Run.matcher_token v7),
            (match v8 with
            | Alt (0, v) ->
                `Choice_auto_semi (
                  (match v with
                  | Alt (0, v) ->
                      `Auto_semi (
                        trans_automatic_semicolon (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `SEMI (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Choice_empty_stmt (
                  (match v with
                  | Alt (0, v) ->
                      `Empty_stmt (
                        trans_empty_statement (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Comp_stmt (
                        trans_compound_statement (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Named_label_stmt (
                        trans_named_label_statement (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Exp_stmt (
                        trans_expression_statement (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `If_stmt (
                        trans_if_statement (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Switch_stmt (
                        trans_switch_statement (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `While_stmt (
                        trans_while_statement (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Do_stmt (
                        trans_do_statement (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `For_stmt (
                        trans_for_statement (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Fore_stmt (
                        trans_foreach_statement (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Goto_stmt (
                        trans_goto_statement (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `Cont_stmt (
                        trans_continue_statement (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Brk_stmt (
                        trans_break_statement (Run.matcher_token v)
                      )
                  | Alt (13, v) ->
                      `Ret_stmt (
                        trans_return_statement (Run.matcher_token v)
                      )
                  | Alt (14, v) ->
                      `Try_stmt (
                        trans_try_statement (Run.matcher_token v)
                      )
                  | Alt (15, v) ->
                      `Decl_stmt (
                        trans_declare_statement (Run.matcher_token v)
                      )
                  | Alt (16, v) ->
                      `Echo_stmt (
                        trans_echo_statement (Run.matcher_token v)
                      )
                  | Alt (17, v) ->
                      `Unset_stmt (
                        trans_unset_statement (Run.matcher_token v)
                      )
                  | Alt (18, v) ->
                      `Const_decl (
                        trans_const_declaration (Run.matcher_token v)
                      )
                  | Alt (19, v) ->
                      `Func_defi (
                        trans_function_definition (Run.matcher_token v)
                      )
                  | Alt (20, v) ->
                      `Class_decl (
                        trans_class_declaration (Run.matcher_token v)
                      )
                  | Alt (21, v) ->
                      `Inte_decl (
                        trans_interface_declaration (Run.matcher_token v)
                      )
                  | Alt (22, v) ->
                      `Trait_decl (
                        trans_trait_declaration (Run.matcher_token v)
                      )
                  | Alt (23, v) ->
                      `Enum_decl (
                        trans_enum_declaration (Run.matcher_token v)
                      )
                  | Alt (24, v) ->
                      `Name_defi (
                        trans_namespace_definition (Run.matcher_token v)
                      )
                  | Alt (25, v) ->
                      `Name_use_decl (
                        trans_namespace_use_declaration (Run.matcher_token v)
                      )
                  | Alt (26, v) ->
                      `Global_decl (
                        trans_global_declaration (Run.matcher_token v)
                      )
                  | Alt (27, v) ->
                      `Func_static_decl (
                        trans_function_static_declaration (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `COLON_rep_choice_empty_stmt_pat_endfor_choice_auto_semi (
                  (match v with
                  | Seq [v0; v1; v2; v3] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Alt (0, v) ->
                                `Empty_stmt (
                                  trans_empty_statement (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Comp_stmt (
                                  trans_compound_statement (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Named_label_stmt (
                                  trans_named_label_statement (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `Exp_stmt (
                                  trans_expression_statement (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `If_stmt (
                                  trans_if_statement (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `Switch_stmt (
                                  trans_switch_statement (Run.matcher_token v)
                                )
                            | Alt (6, v) ->
                                `While_stmt (
                                  trans_while_statement (Run.matcher_token v)
                                )
                            | Alt (7, v) ->
                                `Do_stmt (
                                  trans_do_statement (Run.matcher_token v)
                                )
                            | Alt (8, v) ->
                                `For_stmt (
                                  trans_for_statement (Run.matcher_token v)
                                )
                            | Alt (9, v) ->
                                `Fore_stmt (
                                  trans_foreach_statement (Run.matcher_token v)
                                )
                            | Alt (10, v) ->
                                `Goto_stmt (
                                  trans_goto_statement (Run.matcher_token v)
                                )
                            | Alt (11, v) ->
                                `Cont_stmt (
                                  trans_continue_statement (Run.matcher_token v)
                                )
                            | Alt (12, v) ->
                                `Brk_stmt (
                                  trans_break_statement (Run.matcher_token v)
                                )
                            | Alt (13, v) ->
                                `Ret_stmt (
                                  trans_return_statement (Run.matcher_token v)
                                )
                            | Alt (14, v) ->
                                `Try_stmt (
                                  trans_try_statement (Run.matcher_token v)
                                )
                            | Alt (15, v) ->
                                `Decl_stmt (
                                  trans_declare_statement (Run.matcher_token v)
                                )
                            | Alt (16, v) ->
                                `Echo_stmt (
                                  trans_echo_statement (Run.matcher_token v)
                                )
                            | Alt (17, v) ->
                                `Unset_stmt (
                                  trans_unset_statement (Run.matcher_token v)
                                )
                            | Alt (18, v) ->
                                `Const_decl (
                                  trans_const_declaration (Run.matcher_token v)
                                )
                            | Alt (19, v) ->
                                `Func_defi (
                                  trans_function_definition (Run.matcher_token v)
                                )
                            | Alt (20, v) ->
                                `Class_decl (
                                  trans_class_declaration (Run.matcher_token v)
                                )
                            | Alt (21, v) ->
                                `Inte_decl (
                                  trans_interface_declaration (Run.matcher_token v)
                                )
                            | Alt (22, v) ->
                                `Trait_decl (
                                  trans_trait_declaration (Run.matcher_token v)
                                )
                            | Alt (23, v) ->
                                `Enum_decl (
                                  trans_enum_declaration (Run.matcher_token v)
                                )
                            | Alt (24, v) ->
                                `Name_defi (
                                  trans_namespace_definition (Run.matcher_token v)
                                )
                            | Alt (25, v) ->
                                `Name_use_decl (
                                  trans_namespace_use_declaration (Run.matcher_token v)
                                )
                            | Alt (26, v) ->
                                `Global_decl (
                                  trans_global_declaration (Run.matcher_token v)
                                )
                            | Alt (27, v) ->
                                `Func_static_decl (
                                  trans_function_static_declaration (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        trans_pat_endfor (Run.matcher_token v2),
                        (match v3 with
                        | Alt (0, v) ->
                            `Auto_semi (
                              trans_automatic_semicolon (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `SEMI (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_foreach_pair ((kind, body) : mt) : CST.foreach_pair =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Opt_AMP_exp (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v0
                        ,
                        trans_expression (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `List_lit (
                  trans_list_literal (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_foreach_statement ((kind, body) : mt) : CST.foreach_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            trans_pat_fore (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            trans_pat_as (Run.matcher_token v3),
            (match v4 with
            | Alt (0, v) ->
                `Fore_pair (
                  trans_foreach_pair (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_opt_AMP_exp (
                  (match v with
                  | Alt (0, v) ->
                      `Opt_AMP_exp (
                        (match v with
                        | Seq [v0; v1] ->
                            (
                              Run.opt
                                (fun v -> Run.trans_token (Run.matcher_token v))
                                v0
                              ,
                              trans_expression (Run.matcher_token v1)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `List_lit (
                        trans_list_literal (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v5),
            (match v6 with
            | Alt (0, v) ->
                `Choice_auto_semi (
                  (match v with
                  | Alt (0, v) ->
                      `Auto_semi (
                        trans_automatic_semicolon (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `SEMI (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Choice_empty_stmt (
                  (match v with
                  | Alt (0, v) ->
                      `Empty_stmt (
                        trans_empty_statement (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Comp_stmt (
                        trans_compound_statement (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Named_label_stmt (
                        trans_named_label_statement (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Exp_stmt (
                        trans_expression_statement (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `If_stmt (
                        trans_if_statement (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Switch_stmt (
                        trans_switch_statement (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `While_stmt (
                        trans_while_statement (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Do_stmt (
                        trans_do_statement (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `For_stmt (
                        trans_for_statement (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Fore_stmt (
                        trans_foreach_statement (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Goto_stmt (
                        trans_goto_statement (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `Cont_stmt (
                        trans_continue_statement (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Brk_stmt (
                        trans_break_statement (Run.matcher_token v)
                      )
                  | Alt (13, v) ->
                      `Ret_stmt (
                        trans_return_statement (Run.matcher_token v)
                      )
                  | Alt (14, v) ->
                      `Try_stmt (
                        trans_try_statement (Run.matcher_token v)
                      )
                  | Alt (15, v) ->
                      `Decl_stmt (
                        trans_declare_statement (Run.matcher_token v)
                      )
                  | Alt (16, v) ->
                      `Echo_stmt (
                        trans_echo_statement (Run.matcher_token v)
                      )
                  | Alt (17, v) ->
                      `Unset_stmt (
                        trans_unset_statement (Run.matcher_token v)
                      )
                  | Alt (18, v) ->
                      `Const_decl (
                        trans_const_declaration (Run.matcher_token v)
                      )
                  | Alt (19, v) ->
                      `Func_defi (
                        trans_function_definition (Run.matcher_token v)
                      )
                  | Alt (20, v) ->
                      `Class_decl (
                        trans_class_declaration (Run.matcher_token v)
                      )
                  | Alt (21, v) ->
                      `Inte_decl (
                        trans_interface_declaration (Run.matcher_token v)
                      )
                  | Alt (22, v) ->
                      `Trait_decl (
                        trans_trait_declaration (Run.matcher_token v)
                      )
                  | Alt (23, v) ->
                      `Enum_decl (
                        trans_enum_declaration (Run.matcher_token v)
                      )
                  | Alt (24, v) ->
                      `Name_defi (
                        trans_namespace_definition (Run.matcher_token v)
                      )
                  | Alt (25, v) ->
                      `Name_use_decl (
                        trans_namespace_use_declaration (Run.matcher_token v)
                      )
                  | Alt (26, v) ->
                      `Global_decl (
                        trans_global_declaration (Run.matcher_token v)
                      )
                  | Alt (27, v) ->
                      `Func_static_decl (
                        trans_function_static_declaration (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Colon_blk_pat_endf_choice_auto_semi (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_colon_block (Run.matcher_token v0),
                        trans_pat_endf (Run.matcher_token v1),
                        (match v2 with
                        | Alt (0, v) ->
                            `Auto_semi (
                              trans_automatic_semicolon (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `SEMI (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_formal_parameters ((kind, body) : mt) : CST.formal_parameters =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Simple_param (
                            trans_simple_parameter (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Vari_param (
                            trans_variadic_parameter (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Prop_prom_param (
                            trans_property_promotion_parameter (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Simple_param (
                                      trans_simple_parameter (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Vari_param (
                                      trans_variadic_parameter (Run.matcher_token v)
                                    )
                                | Alt (2, v) ->
                                    `Prop_prom_param (
                                      trans_property_promotion_parameter (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_call_expression ((kind, body) : mt) : CST.function_call_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Name (
                  trans_name (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Rese_id (
                  trans_reserved_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Qual_name (
                  trans_qualified_name (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Choice_choice_choice_dyna_var_name (
                  (match v with
                  | Alt (0, v) ->
                      `Choice_choice_dyna_var_name (
                        (match v with
                        | Alt (0, v) ->
                            `Choice_dyna_var_name (
                              (match v with
                              | Alt (0, v) ->
                                  `Dyna_var_name (
                                    trans_dynamic_variable_name (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Var_name (
                                    trans_variable_name (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                            )
                        | Alt (1, v) ->
                            `Subs_exp (
                              trans_subscript_expression (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Member_call_exp (
                              trans_member_call_expression (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Null_member_call_exp (
                              trans_nullsafe_member_call_expression (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Scoped_call_exp (
                              trans_scoped_call_expression (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Func_call_exp (
                              trans_function_call_expression (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Paren_exp (
                        trans_parenthesized_expression (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Array_crea_exp (
                        trans_array_creation_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Str_ (
                        trans_string__ (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            trans_arguments (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_definition ((kind, body) : mt) : CST.function_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_attribute_list (Run.matcher_token v))
              v0
            ,
            trans_function_definition_header (Run.matcher_token v1),
            trans_compound_statement (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_definition_header ((kind, body) : mt) : CST.function_definition_header =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_pat_func (Run.matcher_token v0),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Name (
                  trans_name (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Rese_id (
                  trans_reserved_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_formal_parameters (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_return_type (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_static_declaration ((kind, body) : mt) : CST.function_static_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_pat_static (Run.matcher_token v0),
            trans_static_variable_declaration (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_static_variable_declaration (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            (match v3 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_global_declaration ((kind, body) : mt) : CST.global_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_pat_global (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Dyna_var_name (
                  trans_dynamic_variable_name (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Var_name (
                  trans_variable_name (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Dyna_var_name (
                            trans_dynamic_variable_name (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Var_name (
                            trans_variable_name (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            (match v3 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_if_statement ((kind, body) : mt) : CST.if_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_if (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Choice_empty_stmt_rep_else_if_clause_opt_else_clause (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        (match v0 with
                        | Alt (0, v) ->
                            `Empty_stmt (
                              trans_empty_statement (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Comp_stmt (
                              trans_compound_statement (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Named_label_stmt (
                              trans_named_label_statement (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Exp_stmt (
                              trans_expression_statement (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `If_stmt (
                              trans_if_statement (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Switch_stmt (
                              trans_switch_statement (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `While_stmt (
                              trans_while_statement (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `Do_stmt (
                              trans_do_statement (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `For_stmt (
                              trans_for_statement (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `Fore_stmt (
                              trans_foreach_statement (Run.matcher_token v)
                            )
                        | Alt (10, v) ->
                            `Goto_stmt (
                              trans_goto_statement (Run.matcher_token v)
                            )
                        | Alt (11, v) ->
                            `Cont_stmt (
                              trans_continue_statement (Run.matcher_token v)
                            )
                        | Alt (12, v) ->
                            `Brk_stmt (
                              trans_break_statement (Run.matcher_token v)
                            )
                        | Alt (13, v) ->
                            `Ret_stmt (
                              trans_return_statement (Run.matcher_token v)
                            )
                        | Alt (14, v) ->
                            `Try_stmt (
                              trans_try_statement (Run.matcher_token v)
                            )
                        | Alt (15, v) ->
                            `Decl_stmt (
                              trans_declare_statement (Run.matcher_token v)
                            )
                        | Alt (16, v) ->
                            `Echo_stmt (
                              trans_echo_statement (Run.matcher_token v)
                            )
                        | Alt (17, v) ->
                            `Unset_stmt (
                              trans_unset_statement (Run.matcher_token v)
                            )
                        | Alt (18, v) ->
                            `Const_decl (
                              trans_const_declaration (Run.matcher_token v)
                            )
                        | Alt (19, v) ->
                            `Func_defi (
                              trans_function_definition (Run.matcher_token v)
                            )
                        | Alt (20, v) ->
                            `Class_decl (
                              trans_class_declaration (Run.matcher_token v)
                            )
                        | Alt (21, v) ->
                            `Inte_decl (
                              trans_interface_declaration (Run.matcher_token v)
                            )
                        | Alt (22, v) ->
                            `Trait_decl (
                              trans_trait_declaration (Run.matcher_token v)
                            )
                        | Alt (23, v) ->
                            `Enum_decl (
                              trans_enum_declaration (Run.matcher_token v)
                            )
                        | Alt (24, v) ->
                            `Name_defi (
                              trans_namespace_definition (Run.matcher_token v)
                            )
                        | Alt (25, v) ->
                            `Name_use_decl (
                              trans_namespace_use_declaration (Run.matcher_token v)
                            )
                        | Alt (26, v) ->
                            `Global_decl (
                              trans_global_declaration (Run.matcher_token v)
                            )
                        | Alt (27, v) ->
                            `Func_static_decl (
                              trans_function_static_declaration (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.repeat
                          (fun v -> trans_else_if_clause (Run.matcher_token v))
                          v1
                        ,
                        Run.opt
                          (fun v -> trans_else_clause (Run.matcher_token v))
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Colon_blk_rep_else_if_clause_2_opt_else_clause_2_pat_endif_choice_auto_semi (
                  (match v with
                  | Seq [v0; v1; v2; v3; v4] ->
                      (
                        trans_colon_block (Run.matcher_token v0),
                        Run.repeat
                          (fun v -> trans_else_if_clause_2 (Run.matcher_token v))
                          v1
                        ,
                        Run.opt
                          (fun v -> trans_else_clause_2 (Run.matcher_token v))
                          v2
                        ,
                        trans_pat_endif (Run.matcher_token v3),
                        (match v4 with
                        | Alt (0, v) ->
                            `Auto_semi (
                              trans_automatic_semicolon (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `SEMI (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_include_expression ((kind, body) : mt) : CST.include_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_incl (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_include_once_expression ((kind, body) : mt) : CST.include_once_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_incl_once (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_interface_declaration ((kind, body) : mt) : CST.interface_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_pat_inte (Run.matcher_token v0),
            trans_name (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_base_clause (Run.matcher_token v))
              v2
            ,
            trans_declaration_list (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_list_destructing ((kind, body) : mt) : CST.list_destructing =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_list_dest (
                      (match v with
                      | Alt (0, v) ->
                          `List_dest (
                            trans_list_destructing (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Choice_cast_var (
                            (match v with
                            | Alt (0, v) ->
                                `Cast_var (
                                  trans_cast_variable (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Choice_choice_dyna_var_name (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Choice_dyna_var_name (
                                        (match v with
                                        | Alt (0, v) ->
                                            `Dyna_var_name (
                                              trans_dynamic_variable_name (Run.matcher_token v)
                                            )
                                        | Alt (1, v) ->
                                            `Var_name (
                                              trans_variable_name (Run.matcher_token v)
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                  | Alt (1, v) ->
                                      `Subs_exp (
                                        trans_subscript_expression (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Member_call_exp (
                                        trans_member_call_expression (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `Null_member_call_exp (
                                        trans_nullsafe_member_call_expression (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Scoped_call_exp (
                                        trans_scoped_call_expression (Run.matcher_token v)
                                      )
                                  | Alt (5, v) ->
                                      `Func_call_exp (
                                        trans_function_call_expression (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | Alt (2, v) ->
                                `Scoped_prop_access_exp (
                                  trans_scoped_property_access_expression (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `Member_access_exp (
                                  trans_member_access_expression (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `Null_member_access_exp (
                                  trans_nullsafe_member_access_expression (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Exp_EQGT_choice_list_dest (
                      (match v with
                      | Seq [v0; v1; v2] ->
                          (
                            trans_expression (Run.matcher_token v0),
                            Run.trans_token (Run.matcher_token v1),
                            (match v2 with
                            | Alt (0, v) ->
                                `List_dest (
                                  trans_list_destructing (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Choice_cast_var (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Cast_var (
                                        trans_cast_variable (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Choice_choice_dyna_var_name (
                                        (match v with
                                        | Alt (0, v) ->
                                            `Choice_dyna_var_name (
                                              (match v with
                                              | Alt (0, v) ->
                                                  `Dyna_var_name (
                                                    trans_dynamic_variable_name (Run.matcher_token v)
                                                  )
                                              | Alt (1, v) ->
                                                  `Var_name (
                                                    trans_variable_name (Run.matcher_token v)
                                                  )
                                              | _ -> assert false
                                              )
                                            )
                                        | Alt (1, v) ->
                                            `Subs_exp (
                                              trans_subscript_expression (Run.matcher_token v)
                                            )
                                        | Alt (2, v) ->
                                            `Member_call_exp (
                                              trans_member_call_expression (Run.matcher_token v)
                                            )
                                        | Alt (3, v) ->
                                            `Null_member_call_exp (
                                              trans_nullsafe_member_call_expression (Run.matcher_token v)
                                            )
                                        | Alt (4, v) ->
                                            `Scoped_call_exp (
                                              trans_scoped_call_expression (Run.matcher_token v)
                                            )
                                        | Alt (5, v) ->
                                            `Func_call_exp (
                                              trans_function_call_expression (Run.matcher_token v)
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                  | Alt (2, v) ->
                                      `Scoped_prop_access_exp (
                                        trans_scoped_property_access_expression (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `Member_access_exp (
                                        trans_member_access_expression (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Null_member_access_exp (
                                        trans_nullsafe_member_access_expression (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      Run.opt
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `Choice_list_dest (
                                (match v with
                                | Alt (0, v) ->
                                    `List_dest (
                                      trans_list_destructing (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Choice_cast_var (
                                      (match v with
                                      | Alt (0, v) ->
                                          `Cast_var (
                                            trans_cast_variable (Run.matcher_token v)
                                          )
                                      | Alt (1, v) ->
                                          `Choice_choice_dyna_var_name (
                                            (match v with
                                            | Alt (0, v) ->
                                                `Choice_dyna_var_name (
                                                  (match v with
                                                  | Alt (0, v) ->
                                                      `Dyna_var_name (
                                                        trans_dynamic_variable_name (Run.matcher_token v)
                                                      )
                                                  | Alt (1, v) ->
                                                      `Var_name (
                                                        trans_variable_name (Run.matcher_token v)
                                                      )
                                                  | _ -> assert false
                                                  )
                                                )
                                            | Alt (1, v) ->
                                                `Subs_exp (
                                                  trans_subscript_expression (Run.matcher_token v)
                                                )
                                            | Alt (2, v) ->
                                                `Member_call_exp (
                                                  trans_member_call_expression (Run.matcher_token v)
                                                )
                                            | Alt (3, v) ->
                                                `Null_member_call_exp (
                                                  trans_nullsafe_member_call_expression (Run.matcher_token v)
                                                )
                                            | Alt (4, v) ->
                                                `Scoped_call_exp (
                                                  trans_scoped_call_expression (Run.matcher_token v)
                                                )
                                            | Alt (5, v) ->
                                                `Func_call_exp (
                                                  trans_function_call_expression (Run.matcher_token v)
                                                )
                                            | _ -> assert false
                                            )
                                          )
                                      | Alt (2, v) ->
                                          `Scoped_prop_access_exp (
                                            trans_scoped_property_access_expression (Run.matcher_token v)
                                          )
                                      | Alt (3, v) ->
                                          `Member_access_exp (
                                            trans_member_access_expression (Run.matcher_token v)
                                          )
                                      | Alt (4, v) ->
                                          `Null_member_access_exp (
                                            trans_nullsafe_member_access_expression (Run.matcher_token v)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                          | Alt (1, v) ->
                              `Exp_EQGT_choice_list_dest (
                                (match v with
                                | Seq [v0; v1; v2] ->
                                    (
                                      trans_expression (Run.matcher_token v0),
                                      Run.trans_token (Run.matcher_token v1),
                                      (match v2 with
                                      | Alt (0, v) ->
                                          `List_dest (
                                            trans_list_destructing (Run.matcher_token v)
                                          )
                                      | Alt (1, v) ->
                                          `Choice_cast_var (
                                            (match v with
                                            | Alt (0, v) ->
                                                `Cast_var (
                                                  trans_cast_variable (Run.matcher_token v)
                                                )
                                            | Alt (1, v) ->
                                                `Choice_choice_dyna_var_name (
                                                  (match v with
                                                  | Alt (0, v) ->
                                                      `Choice_dyna_var_name (
                                                        (match v with
                                                        | Alt (0, v) ->
                                                            `Dyna_var_name (
                                                              trans_dynamic_variable_name (Run.matcher_token v)
                                                            )
                                                        | Alt (1, v) ->
                                                            `Var_name (
                                                              trans_variable_name (Run.matcher_token v)
                                                            )
                                                        | _ -> assert false
                                                        )
                                                      )
                                                  | Alt (1, v) ->
                                                      `Subs_exp (
                                                        trans_subscript_expression (Run.matcher_token v)
                                                      )
                                                  | Alt (2, v) ->
                                                      `Member_call_exp (
                                                        trans_member_call_expression (Run.matcher_token v)
                                                      )
                                                  | Alt (3, v) ->
                                                      `Null_member_call_exp (
                                                        trans_nullsafe_member_call_expression (Run.matcher_token v)
                                                      )
                                                  | Alt (4, v) ->
                                                      `Scoped_call_exp (
                                                        trans_scoped_call_expression (Run.matcher_token v)
                                                      )
                                                  | Alt (5, v) ->
                                                      `Func_call_exp (
                                                        trans_function_call_expression (Run.matcher_token v)
                                                      )
                                                  | _ -> assert false
                                                  )
                                                )
                                            | Alt (2, v) ->
                                                `Scoped_prop_access_exp (
                                                  trans_scoped_property_access_expression (Run.matcher_token v)
                                                )
                                            | Alt (3, v) ->
                                                `Member_access_exp (
                                                  trans_member_access_expression (Run.matcher_token v)
                                                )
                                            | Alt (4, v) ->
                                                `Null_member_access_exp (
                                                  trans_nullsafe_member_access_expression (Run.matcher_token v)
                                                )
                                            | _ -> assert false
                                            )
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_list_literal ((kind, body) : mt) : CST.list_literal =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `List_dest (
            trans_list_destructing (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Array_dest (
            trans_array_destructing (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_match_block ((kind, body) : mt) : CST.match_block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Match_cond_exp (
                  trans_match_conditional_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Match_defa_exp (
                  trans_match_default_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Match_cond_exp (
                            trans_match_conditional_expression (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Match_defa_exp (
                            trans_match_default_expression (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_match_condition_list ((kind, body) : mt) : CST.match_condition_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_match_conditional_expression ((kind, body) : mt) : CST.match_conditional_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_match_condition_list (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_match_default_expression ((kind, body) : mt) : CST.match_default_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_defa (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_match_expression ((kind, body) : mt) : CST.match_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_match (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            trans_match_block (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_member_access_expression ((kind, body) : mt) : CST.member_access_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_dereferencable_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Choice_rese_id (
                  (match v with
                  | Alt (0, v) ->
                      `Rese_id (
                        trans_reserved_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Name (
                        trans_name (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Choice_dyna_var_name (
                        (match v with
                        | Alt (0, v) ->
                            `Dyna_var_name (
                              trans_dynamic_variable_name (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Var_name (
                              trans_variable_name (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `LCURL_exp_RCURL (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_expression (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_member_call_expression ((kind, body) : mt) : CST.member_call_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_dereferencable_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Choice_rese_id (
                  (match v with
                  | Alt (0, v) ->
                      `Rese_id (
                        trans_reserved_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Name (
                        trans_name (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Choice_dyna_var_name (
                        (match v with
                        | Alt (0, v) ->
                            `Dyna_var_name (
                              trans_dynamic_variable_name (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Var_name (
                              trans_variable_name (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `LCURL_exp_RCURL (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_expression (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            trans_arguments (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_member_declaration ((kind, body) : mt) : CST.member_declaration =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Class_const_decl (
            trans_class_const_declaration (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Prop_decl (
            trans_property_declaration (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Meth_decl (
            trans_method_declaration (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Use_decl (
            trans_use_declaration (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_method_declaration ((kind, body) : mt) : CST.method_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_attribute_list (Run.matcher_token v))
              v0
            ,
            Run.repeat
              (fun v -> trans_modifier (Run.matcher_token v))
              v1
            ,
            trans_function_definition_header (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_auto_semi (
                  (match v with
                  | Alt (0, v) ->
                      `Auto_semi (
                        trans_automatic_semicolon (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `SEMI (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_namespace_definition ((kind, body) : mt) : CST.namespace_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_name (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Name_name_choice_auto_semi (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_namespace_name (Run.matcher_token v0),
                        (match v1 with
                        | Alt (0, v) ->
                            `Auto_semi (
                              trans_automatic_semicolon (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `SEMI (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Opt_name_name_comp_stmt (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.opt
                          (fun v -> trans_namespace_name (Run.matcher_token v))
                          v0
                        ,
                        trans_compound_statement (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_nullsafe_member_access_expression ((kind, body) : mt) : CST.nullsafe_member_access_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_dereferencable_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Choice_rese_id (
                  (match v with
                  | Alt (0, v) ->
                      `Rese_id (
                        trans_reserved_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Name (
                        trans_name (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Choice_dyna_var_name (
                        (match v with
                        | Alt (0, v) ->
                            `Dyna_var_name (
                              trans_dynamic_variable_name (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Var_name (
                              trans_variable_name (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `LCURL_exp_RCURL (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_expression (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_nullsafe_member_call_expression ((kind, body) : mt) : CST.nullsafe_member_call_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_dereferencable_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Choice_rese_id (
                  (match v with
                  | Alt (0, v) ->
                      `Rese_id (
                        trans_reserved_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Name (
                        trans_name (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Choice_dyna_var_name (
                        (match v with
                        | Alt (0, v) ->
                            `Dyna_var_name (
                              trans_dynamic_variable_name (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Var_name (
                              trans_variable_name (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `LCURL_exp_RCURL (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_expression (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            trans_arguments (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_object_creation_expression ((kind, body) : mt) : CST.object_creation_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `New_choice_qual_name_opt_args (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `Qual_name (
                        trans_qualified_name (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Name (
                        trans_name (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Rese_id (
                        trans_reserved_identifier (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Subs_exp (
                        trans_subscript_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Member_access_exp (
                        trans_member_access_expression (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Null_member_access_exp (
                        trans_nullsafe_member_access_expression (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Scoped_prop_access_exp (
                        trans_scoped_property_access_expression (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Choice_dyna_var_name (
                        (match v with
                        | Alt (0, v) ->
                            `Dyna_var_name (
                              trans_dynamic_variable_name (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Var_name (
                              trans_variable_name (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.opt
                    (fun v -> trans_arguments (Run.matcher_token v))
                    v2
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `New_pat_class_opt_args_opt_base_clause_opt_class_inte_clause_decl_list (
            (match v with
            | Seq [v0; v1; v2; v3; v4; v5] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_pat_class (Run.matcher_token v1),
                  Run.opt
                    (fun v -> trans_arguments (Run.matcher_token v))
                    v2
                  ,
                  Run.opt
                    (fun v -> trans_base_clause (Run.matcher_token v))
                    v3
                  ,
                  Run.opt
                    (fun v ->
                      trans_class_interface_clause (Run.matcher_token v)
                    )
                    v4
                  ,
                  trans_declaration_list (Run.matcher_token v5)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_expression ((kind, body) : mt) : CST.parenthesized_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_primary_expression ((kind, body) : mt) : CST.primary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_cast_var (
            (match v with
            | Alt (0, v) ->
                `Cast_var (
                  trans_cast_variable (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_choice_dyna_var_name (
                  (match v with
                  | Alt (0, v) ->
                      `Choice_dyna_var_name (
                        (match v with
                        | Alt (0, v) ->
                            `Dyna_var_name (
                              trans_dynamic_variable_name (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Var_name (
                              trans_variable_name (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Subs_exp (
                        trans_subscript_expression (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Member_call_exp (
                        trans_member_call_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Null_member_call_exp (
                        trans_nullsafe_member_call_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Scoped_call_exp (
                        trans_scoped_call_expression (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Func_call_exp (
                        trans_function_call_expression (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Scoped_prop_access_exp (
                  trans_scoped_property_access_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Member_access_exp (
                  trans_member_access_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Null_member_access_exp (
                  trans_nullsafe_member_access_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Choice_int (
            (match v with
            | Alt (0, v) ->
                `Int (
                  trans_integer (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Float (
                  trans_float_ (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Str_ (
                  trans_string__ (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Bool (
                  trans_boolean (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Null (
                  trans_null (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Class_cst_access_exp (
            trans_class_constant_access_expression (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Qual_name (
            trans_qualified_name (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Name (
            trans_name (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Array_crea_exp (
            trans_array_creation_expression (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Print_intr (
            trans_print_intrinsic (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Anon_func_crea_exp (
            trans_anonymous_function_creation_expression (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Arrow_func (
            trans_arrow_function (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Obj_crea_exp (
            trans_object_creation_expression (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Update_exp (
            trans_update_expression (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Shell_cmd_exp (
            trans_shell_command_expression (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Paren_exp (
            trans_parenthesized_expression (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `Throw_exp (
            trans_throw_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_print_intrinsic ((kind, body) : mt) : CST.print_intrinsic =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_property_declaration ((kind, body) : mt) : CST.property_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.opt
              (fun v -> trans_attribute_list (Run.matcher_token v))
              v0
            ,
            Run.repeat1
              (fun v -> trans_modifier (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_type_ (Run.matcher_token v))
              v2
            ,
            trans_property_element (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_property_element (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            (match v5 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_property_element ((kind, body) : mt) : CST.property_element =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_variable_name (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_property_initializer (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_property_initializer ((kind, body) : mt) : CST.property_initializer =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_property_promotion_parameter ((kind, body) : mt) : CST.property_promotion_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_visibility_modifier (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_type_ (Run.matcher_token v))
              v1
            ,
            trans_variable_name (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_require_expression ((kind, body) : mt) : CST.require_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_requ (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_require_once_expression ((kind, body) : mt) : CST.require_once_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_requ_once (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_return_statement ((kind, body) : mt) : CST.return_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_ret (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_scope_resolution_qualifier ((kind, body) : mt) : CST.scope_resolution_qualifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Rela_scope (
            trans_relative_scope (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Name (
            trans_name (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Rese_id (
            trans_reserved_identifier (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Qual_name (
            trans_qualified_name (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Dere_exp (
            trans_dereferencable_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_scoped_call_expression ((kind, body) : mt) : CST.scoped_call_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_scope_resolution_qualifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Choice_rese_id (
                  (match v with
                  | Alt (0, v) ->
                      `Rese_id (
                        trans_reserved_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Name (
                        trans_name (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Choice_dyna_var_name (
                        (match v with
                        | Alt (0, v) ->
                            `Dyna_var_name (
                              trans_dynamic_variable_name (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Var_name (
                              trans_variable_name (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `LCURL_exp_RCURL (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_expression (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            trans_arguments (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_scoped_property_access_expression ((kind, body) : mt) : CST.scoped_property_access_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_scope_resolution_qualifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Dyna_var_name (
                  trans_dynamic_variable_name (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Var_name (
                  trans_variable_name (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_sequence_expression ((kind, body) : mt) : CST.sequence_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Seq_exp (
                  trans_sequence_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_simple_parameter ((kind, body) : mt) : CST.simple_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_attribute_list (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> trans_type_ (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            trans_variable_name (Run.matcher_token v3),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_static_variable_declaration ((kind, body) : mt) : CST.static_variable_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_variable_name (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_subscript_expression ((kind, body) : mt) : CST.subscript_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_dereferencable_expression (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `LBRACK_opt_exp_RBRACK (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.opt
                          (fun v -> trans_expression (Run.matcher_token v))
                          v1
                        ,
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `LCURL_exp_RCURL (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_expression (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_switch_block ((kind, body) : mt) : CST.switch_block =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `LCURL_rep_choice_case_stmt_RCURL (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Case_stmt (
                            trans_case_statement (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Defa_stmt (
                            trans_default_statement (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `COLON_rep_choice_case_stmt_pat_ends_choice_auto_semi (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Case_stmt (
                            trans_case_statement (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Defa_stmt (
                            trans_default_statement (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  trans_pat_ends (Run.matcher_token v2),
                  (match v3 with
                  | Alt (0, v) ->
                      `Auto_semi (
                        trans_automatic_semicolon (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `SEMI (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_switch_statement ((kind, body) : mt) : CST.switch_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_switch (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            trans_switch_block (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_throw_expression ((kind, body) : mt) : CST.throw_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_throw (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_trait_declaration ((kind, body) : mt) : CST.trait_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_trait (Run.matcher_token v0),
            trans_name (Run.matcher_token v1),
            trans_declaration_list (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_try_statement ((kind, body) : mt) : CST.try_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_try (Run.matcher_token v0),
            trans_compound_statement (Run.matcher_token v1),
            Run.repeat1
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Catch_clause (
                      trans_catch_clause (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Fina_clause (
                      trans_finally_clause (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unary_expression ((kind, body) : mt) : CST.unary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Clone_exp (
            trans_clone_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Prim_exp (
            trans_primary_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Expo_exp (
            trans_exponentiation_expression (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Un_op_exp (
            trans_unary_op_expression (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Cast_exp (
            trans_cast_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unary_op_expression ((kind, body) : mt) : CST.unary_op_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `AT_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Choice_PLUS_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `PLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `DASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `TILDE (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `BANG (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unset_statement ((kind, body) : mt) : CST.unset_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Cast_var (
                  trans_cast_variable (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_choice_dyna_var_name (
                  (match v with
                  | Alt (0, v) ->
                      `Choice_dyna_var_name (
                        (match v with
                        | Alt (0, v) ->
                            `Dyna_var_name (
                              trans_dynamic_variable_name (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Var_name (
                              trans_variable_name (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Subs_exp (
                        trans_subscript_expression (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Member_call_exp (
                        trans_member_call_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Null_member_call_exp (
                        trans_nullsafe_member_call_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Scoped_call_exp (
                        trans_scoped_call_expression (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Func_call_exp (
                        trans_function_call_expression (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Scoped_prop_access_exp (
                  trans_scoped_property_access_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Member_access_exp (
                  trans_member_access_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Null_member_access_exp (
                  trans_nullsafe_member_access_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Cast_var (
                            trans_cast_variable (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Choice_choice_dyna_var_name (
                            (match v with
                            | Alt (0, v) ->
                                `Choice_dyna_var_name (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Dyna_var_name (
                                        trans_dynamic_variable_name (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Var_name (
                                        trans_variable_name (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | Alt (1, v) ->
                                `Subs_exp (
                                  trans_subscript_expression (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Member_call_exp (
                                  trans_member_call_expression (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `Null_member_call_exp (
                                  trans_nullsafe_member_call_expression (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `Scoped_call_exp (
                                  trans_scoped_call_expression (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `Func_call_exp (
                                  trans_function_call_expression (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (2, v) ->
                          `Scoped_prop_access_exp (
                            trans_scoped_property_access_expression (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Member_access_exp (
                            trans_member_access_expression (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Null_member_access_exp (
                            trans_nullsafe_member_access_expression (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4),
            (match v5 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_update_expression ((kind, body) : mt) : CST.update_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_cast_var_PLUSPLUS (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Cast_var (
                        trans_cast_variable (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Choice_choice_dyna_var_name (
                        (match v with
                        | Alt (0, v) ->
                            `Choice_dyna_var_name (
                              (match v with
                              | Alt (0, v) ->
                                  `Dyna_var_name (
                                    trans_dynamic_variable_name (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Var_name (
                                    trans_variable_name (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                            )
                        | Alt (1, v) ->
                            `Subs_exp (
                              trans_subscript_expression (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Member_call_exp (
                              trans_member_call_expression (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Null_member_call_exp (
                              trans_nullsafe_member_call_expression (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Scoped_call_exp (
                              trans_scoped_call_expression (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Func_call_exp (
                              trans_function_call_expression (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (2, v) ->
                      `Scoped_prop_access_exp (
                        trans_scoped_property_access_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Member_access_exp (
                        trans_member_access_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Null_member_access_exp (
                        trans_nullsafe_member_access_expression (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.trans_token (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Choice_cast_var_DASHDASH (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Cast_var (
                        trans_cast_variable (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Choice_choice_dyna_var_name (
                        (match v with
                        | Alt (0, v) ->
                            `Choice_dyna_var_name (
                              (match v with
                              | Alt (0, v) ->
                                  `Dyna_var_name (
                                    trans_dynamic_variable_name (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Var_name (
                                    trans_variable_name (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                            )
                        | Alt (1, v) ->
                            `Subs_exp (
                              trans_subscript_expression (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Member_call_exp (
                              trans_member_call_expression (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Null_member_call_exp (
                              trans_nullsafe_member_call_expression (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Scoped_call_exp (
                              trans_scoped_call_expression (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Func_call_exp (
                              trans_function_call_expression (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (2, v) ->
                      `Scoped_prop_access_exp (
                        trans_scoped_property_access_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Member_access_exp (
                        trans_member_access_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Null_member_access_exp (
                        trans_nullsafe_member_access_expression (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.trans_token (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `PLUSPLUS_choice_cast_var (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `Cast_var (
                        trans_cast_variable (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Choice_choice_dyna_var_name (
                        (match v with
                        | Alt (0, v) ->
                            `Choice_dyna_var_name (
                              (match v with
                              | Alt (0, v) ->
                                  `Dyna_var_name (
                                    trans_dynamic_variable_name (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Var_name (
                                    trans_variable_name (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                            )
                        | Alt (1, v) ->
                            `Subs_exp (
                              trans_subscript_expression (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Member_call_exp (
                              trans_member_call_expression (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Null_member_call_exp (
                              trans_nullsafe_member_call_expression (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Scoped_call_exp (
                              trans_scoped_call_expression (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Func_call_exp (
                              trans_function_call_expression (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (2, v) ->
                      `Scoped_prop_access_exp (
                        trans_scoped_property_access_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Member_access_exp (
                        trans_member_access_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Null_member_access_exp (
                        trans_nullsafe_member_access_expression (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `DASHDASH_choice_cast_var (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `Cast_var (
                        trans_cast_variable (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Choice_choice_dyna_var_name (
                        (match v with
                        | Alt (0, v) ->
                            `Choice_dyna_var_name (
                              (match v with
                              | Alt (0, v) ->
                                  `Dyna_var_name (
                                    trans_dynamic_variable_name (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Var_name (
                                    trans_variable_name (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                            )
                        | Alt (1, v) ->
                            `Subs_exp (
                              trans_subscript_expression (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Member_call_exp (
                              trans_member_call_expression (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Null_member_call_exp (
                              trans_nullsafe_member_call_expression (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Scoped_call_exp (
                              trans_scoped_call_expression (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Func_call_exp (
                              trans_function_call_expression (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (2, v) ->
                      `Scoped_prop_access_exp (
                        trans_scoped_property_access_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Member_access_exp (
                        trans_member_access_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Null_member_access_exp (
                        trans_nullsafe_member_access_expression (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_use_as_clause ((kind, body) : mt) : CST.use_as_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Class_cst_access_exp (
                  trans_class_constant_access_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Name (
                  trans_name (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_pat_as (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Opt_visi_modi_name (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.opt
                          (fun v -> trans_visibility_modifier (Run.matcher_token v))
                          v0
                        ,
                        trans_name (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Visi_modi_opt_name (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_visibility_modifier (Run.matcher_token v0),
                        Run.opt
                          (fun v -> trans_name (Run.matcher_token v))
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_use_declaration ((kind, body) : mt) : CST.use_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_pat_use (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Name (
                  trans_name (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Rese_id (
                  trans_reserved_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Qual_name (
                  trans_qualified_name (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Name (
                            trans_name (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Rese_id (
                            trans_reserved_identifier (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Qual_name (
                            trans_qualified_name (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            (match v3 with
            | Alt (0, v) ->
                `Use_list (
                  trans_use_list (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_auto_semi (
                  (match v with
                  | Alt (0, v) ->
                      `Auto_semi (
                        trans_automatic_semicolon (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `SEMI (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_use_instead_of_clause ((kind, body) : mt) : CST.use_instead_of_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Class_cst_access_exp (
                  trans_class_constant_access_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Name (
                  trans_name (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_pat_inst (Run.matcher_token v1),
            trans_name (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_use_list ((kind, body) : mt) : CST.use_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Use_inst_of_clause (
                            trans_use_instead_of_clause (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Use_as_clause (
                            trans_use_as_clause (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      (match v1 with
                      | Alt (0, v) ->
                          `Auto_semi (
                            trans_automatic_semicolon (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `SEMI (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_variadic_parameter ((kind, body) : mt) : CST.variadic_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_attribute_list (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> trans_type_ (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            trans_variable_name (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_variadic_unpacking ((kind, body) : mt) : CST.variadic_unpacking =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_while_statement ((kind, body) : mt) : CST.while_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_while (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Choice_empty_stmt (
                  (match v with
                  | Alt (0, v) ->
                      `Empty_stmt (
                        trans_empty_statement (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Comp_stmt (
                        trans_compound_statement (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Named_label_stmt (
                        trans_named_label_statement (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Exp_stmt (
                        trans_expression_statement (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `If_stmt (
                        trans_if_statement (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Switch_stmt (
                        trans_switch_statement (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `While_stmt (
                        trans_while_statement (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Do_stmt (
                        trans_do_statement (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `For_stmt (
                        trans_for_statement (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Fore_stmt (
                        trans_foreach_statement (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Goto_stmt (
                        trans_goto_statement (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `Cont_stmt (
                        trans_continue_statement (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Brk_stmt (
                        trans_break_statement (Run.matcher_token v)
                      )
                  | Alt (13, v) ->
                      `Ret_stmt (
                        trans_return_statement (Run.matcher_token v)
                      )
                  | Alt (14, v) ->
                      `Try_stmt (
                        trans_try_statement (Run.matcher_token v)
                      )
                  | Alt (15, v) ->
                      `Decl_stmt (
                        trans_declare_statement (Run.matcher_token v)
                      )
                  | Alt (16, v) ->
                      `Echo_stmt (
                        trans_echo_statement (Run.matcher_token v)
                      )
                  | Alt (17, v) ->
                      `Unset_stmt (
                        trans_unset_statement (Run.matcher_token v)
                      )
                  | Alt (18, v) ->
                      `Const_decl (
                        trans_const_declaration (Run.matcher_token v)
                      )
                  | Alt (19, v) ->
                      `Func_defi (
                        trans_function_definition (Run.matcher_token v)
                      )
                  | Alt (20, v) ->
                      `Class_decl (
                        trans_class_declaration (Run.matcher_token v)
                      )
                  | Alt (21, v) ->
                      `Inte_decl (
                        trans_interface_declaration (Run.matcher_token v)
                      )
                  | Alt (22, v) ->
                      `Trait_decl (
                        trans_trait_declaration (Run.matcher_token v)
                      )
                  | Alt (23, v) ->
                      `Enum_decl (
                        trans_enum_declaration (Run.matcher_token v)
                      )
                  | Alt (24, v) ->
                      `Name_defi (
                        trans_namespace_definition (Run.matcher_token v)
                      )
                  | Alt (25, v) ->
                      `Name_use_decl (
                        trans_namespace_use_declaration (Run.matcher_token v)
                      )
                  | Alt (26, v) ->
                      `Global_decl (
                        trans_global_declaration (Run.matcher_token v)
                      )
                  | Alt (27, v) ->
                      `Func_static_decl (
                        trans_function_static_declaration (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Colon_blk_pat_endw_choice_auto_semi (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_colon_block (Run.matcher_token v0),
                        trans_pat_endw (Run.matcher_token v1),
                        (match v2 with
                        | Alt (0, v) ->
                            `Auto_semi (
                              trans_automatic_semicolon (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `SEMI (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_yield_expression ((kind, body) : mt) : CST.yield_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Array_elem_init (
                      trans_array_element_initializer (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `From_exp (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_expression (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false







let trans_program ((kind, body) : mt) : CST.program =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_text (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_php_tag (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `Empty_stmt (
                                trans_empty_statement (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Comp_stmt (
                                trans_compound_statement (Run.matcher_token v)
                              )
                          | Alt (2, v) ->
                              `Named_label_stmt (
                                trans_named_label_statement (Run.matcher_token v)
                              )
                          | Alt (3, v) ->
                              `Exp_stmt (
                                trans_expression_statement (Run.matcher_token v)
                              )
                          | Alt (4, v) ->
                              `If_stmt (
                                trans_if_statement (Run.matcher_token v)
                              )
                          | Alt (5, v) ->
                              `Switch_stmt (
                                trans_switch_statement (Run.matcher_token v)
                              )
                          | Alt (6, v) ->
                              `While_stmt (
                                trans_while_statement (Run.matcher_token v)
                              )
                          | Alt (7, v) ->
                              `Do_stmt (
                                trans_do_statement (Run.matcher_token v)
                              )
                          | Alt (8, v) ->
                              `For_stmt (
                                trans_for_statement (Run.matcher_token v)
                              )
                          | Alt (9, v) ->
                              `Fore_stmt (
                                trans_foreach_statement (Run.matcher_token v)
                              )
                          | Alt (10, v) ->
                              `Goto_stmt (
                                trans_goto_statement (Run.matcher_token v)
                              )
                          | Alt (11, v) ->
                              `Cont_stmt (
                                trans_continue_statement (Run.matcher_token v)
                              )
                          | Alt (12, v) ->
                              `Brk_stmt (
                                trans_break_statement (Run.matcher_token v)
                              )
                          | Alt (13, v) ->
                              `Ret_stmt (
                                trans_return_statement (Run.matcher_token v)
                              )
                          | Alt (14, v) ->
                              `Try_stmt (
                                trans_try_statement (Run.matcher_token v)
                              )
                          | Alt (15, v) ->
                              `Decl_stmt (
                                trans_declare_statement (Run.matcher_token v)
                              )
                          | Alt (16, v) ->
                              `Echo_stmt (
                                trans_echo_statement (Run.matcher_token v)
                              )
                          | Alt (17, v) ->
                              `Unset_stmt (
                                trans_unset_statement (Run.matcher_token v)
                              )
                          | Alt (18, v) ->
                              `Const_decl (
                                trans_const_declaration (Run.matcher_token v)
                              )
                          | Alt (19, v) ->
                              `Func_defi (
                                trans_function_definition (Run.matcher_token v)
                              )
                          | Alt (20, v) ->
                              `Class_decl (
                                trans_class_declaration (Run.matcher_token v)
                              )
                          | Alt (21, v) ->
                              `Inte_decl (
                                trans_interface_declaration (Run.matcher_token v)
                              )
                          | Alt (22, v) ->
                              `Trait_decl (
                                trans_trait_declaration (Run.matcher_token v)
                              )
                          | Alt (23, v) ->
                              `Enum_decl (
                                trans_enum_declaration (Run.matcher_token v)
                              )
                          | Alt (24, v) ->
                              `Name_defi (
                                trans_namespace_definition (Run.matcher_token v)
                              )
                          | Alt (25, v) ->
                              `Name_use_decl (
                                trans_namespace_use_declaration (Run.matcher_token v)
                              )
                          | Alt (26, v) ->
                              `Global_decl (
                                trans_global_declaration (Run.matcher_token v)
                              )
                          | Alt (27, v) ->
                              `Func_static_decl (
                                trans_function_static_declaration (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false



(*
   Costly operation that translates a whole tree or subtree.

   The first pass translates it into a generic tree structure suitable
   to guess which node corresponds to each grammar rule.
   The second pass is a translation into a typed tree where each grammar
   node has its own type.

   This function is called:
   - once on the root of the program after removing extras
     (comments and other nodes that occur anywhere independently from
     the grammar);
   - once of each extra node, resulting in its own independent tree of type
     'extra'.
*)
let translate_tree src node trans_x =
  let matched_tree = Run.match_tree children_regexps src node in
  Option.map trans_x matched_tree


let translate_extra src (node : Tree_sitter_output_t.node) : CST.extra option =
  match node.type_ with
  | "comment" ->
      (match translate_tree src node trans_comment with
      | None -> None
      | Some x -> Some (`Comment (Run.get_loc node, x)))
  | "text_interpolation" ->
      (match translate_tree src node trans_text_interpolation with
      | None -> None
      | Some x -> Some (`Text_interpolation (Run.get_loc node, x)))
  | _ -> None

let translate_root src root_node =
  translate_tree src root_node trans_program

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let opt_program, extras =
     Run.translate
       ~extras
       ~translate_root:(translate_root src)
       ~translate_extra:(translate_extra src)
       orig_root_node
  in
  Parsing_result.create src opt_program extras errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

